{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebStorm Project\\\\flowingcloud\\\\src\\\\components\\\\View\\\\Territory\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport * as echarts from 'echarts/core';\nimport china from 'echarts/lib/chart/map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Territory extends Component {\n  componentDidMount() {\n    const outname = [\"南海诸岛\", '北京', '天津', '上海', '重庆', '河北', '河南', '云南', '辽宁', '黑龙江', '湖南', '安徽', '山东', '新疆', '江苏', '浙江', '江西', '湖北', '广西', '甘肃', '山西', '内蒙古', '陕西', '吉林', '福建', '贵州', '广东', '青海', '西藏', '四川', '宁夏', '海南', '台湾', '香港', '澳门'];\n    const outvalue = [0, 524, 13, 140, 75, 13, 83, 11, 19, 15, 69, 260, 39, 4, 31, 104, 36, 1052, 33, 347, 9, 157, 22, 4, 18, 5, 2398, 41, 0, 484, 404, 22, 3, 5, 225];\n    const outdata = [];\n    let max = 6000,\n        min = 10;\n    let maxSize4Pin = 100,\n        minSize4Pin = 20;\n\n    for (let i = 0; i < outname.length; i++) {\n      outdata.push({\n        name: outname[i],\n        value: outvalue[i]\n      });\n    }\n\n    const geoCoordMap = {};\n    /*获取地图数据*/\n\n    const mapFeatures = echarts.getMap('china').geoJson.features;\n    mapFeatures.forEach(function (v) {\n      console.info(v); // 地区名称\n\n      const name = v.properties.name; // 地区经纬度\n\n      geoCoordMap[name] = v.properties.cp;\n    });\n\n    const convertData = function (outdata) {\n      const res = [];\n\n      for (let i = 0; i < outdata.length; i++) {\n        const geoCoord = geoCoordMap[outdata[i].name];\n\n        if (geoCoord) {\n          res.push({\n            name: outdata[i].name,\n            value: geoCoord.concat(outdata[i].value)\n          });\n        }\n      }\n\n      return res;\n    };\n\n    const option = {\n      backgroundColor: '#0F1C3C',\n      tooltip: {\n        show: true,\n        formatter: function (params) {\n          if (params.value.length > 1) {\n            return '&nbsp;&nbsp;' + params.name + '&nbsp;&nbsp;&nbsp;' + params.value[2] + '人&nbsp;&nbsp;';\n          } else {\n            return '&nbsp;&nbsp;' + params.name + '&nbsp;&nbsp;&nbsp;' + params.value + '人&nbsp;&nbsp;';\n          }\n        }\n      },\n      geo: {\n        map: 'china',\n        show: true,\n        roam: false,\n        label: {\n          emphasis: {\n            show: false\n          }\n        },\n        layoutSize: \"100%\",\n        itemStyle: {\n          normal: {\n            borderColor: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: '#00F6FF'\n            }, {\n              offset: 1,\n              color: '#53D9FF'\n            }], false),\n            borderWidth: 3,\n            shadowColor: 'rgba(10,76,139,1)',\n            shadowOffsetY: 0,\n            shadowBlur: 60\n          }\n        }\n      },\n      series: [{\n        type: 'map',\n        map: 'china',\n        aspectScale: 0.75,\n        //zoom:1.1,\n        label: {\n          normal: {\n            show: false\n          },\n          emphasis: {\n            show: false\n          }\n        },\n        itemStyle: {\n          normal: {\n            areaColor: {\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [{\n                offset: 0,\n                color: '#073684' // 0% 处的颜色\n\n              }, {\n                offset: 1,\n                color: '#061E3D' // 100% 处的颜色\n\n              }]\n            },\n            borderColor: '#215495',\n            borderWidth: 1\n          },\n          emphasis: {\n            areaColor: {\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [{\n                offset: 0,\n                color: '#073684' // 0% 处的颜色\n\n              }, {\n                offset: 1,\n                color: '#061E3D' // 100% 处的颜色\n\n              }]\n            }\n          }\n        },\n        data: outdata\n      }, {\n        type: 'effectScatter',\n        coordinateSystem: 'geo',\n        rippleEffect: {\n          brushType: 'stroke'\n        },\n        showEffectOn: 'render',\n        itemStyle: {\n          normal: {\n            color: {\n              type: 'radial',\n              x: 0.5,\n              y: 0.5,\n              r: 0.5,\n              colorStops: [{\n                offset: 0,\n                color: 'rgba(5,80,151,0.2)'\n              }, {\n                offset: 0.8,\n                color: 'rgba(5,80,151,0.8)'\n              }, {\n                offset: 1,\n                color: 'rgba(0,108,255,0.7)'\n              }],\n              global: false // 缺省为 false\n\n            }\n          }\n        },\n        label: {\n          normal: {\n            show: true,\n            color: '#fff',\n            fontWeight: 'bold',\n            position: 'inside',\n            formatter: function (para) {\n              return '{cnNum|' + para.data.value[2] + '}';\n            },\n            rich: {\n              cnNum: {\n                fontSize: 13,\n                color: '#D4EEFF'\n              }\n            }\n          }\n        },\n        symbol: 'circle',\n        symbolSize: function (val) {\n          if (val[2] === 0) {\n            return 0;\n          }\n\n          const a = (maxSize4Pin - minSize4Pin) / (max - min);\n          const b = maxSize4Pin - a * max;\n          return a * val[2] + b * 1.2;\n        },\n        data: convertData(outdata),\n        zlevel: 1\n      }]\n    };\n    echarts.init(this.container).setOption(option);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: element => {\n        this.container = element;\n      },\n      style: {\n        width: '630px',\n        height: '428px',\n        marginTop: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Territory;","map":{"version":3,"sources":["D:/WebStorm Project/flowingcloud/src/components/View/Territory/index.jsx"],"names":["React","Component","echarts","china","Territory","componentDidMount","outname","outvalue","outdata","max","min","maxSize4Pin","minSize4Pin","i","length","push","name","value","geoCoordMap","mapFeatures","getMap","geoJson","features","forEach","v","console","info","properties","cp","convertData","res","geoCoord","concat","option","backgroundColor","tooltip","show","formatter","params","geo","map","roam","label","emphasis","layoutSize","itemStyle","normal","borderColor","graphic","LinearGradient","offset","color","borderWidth","shadowColor","shadowOffsetY","shadowBlur","series","type","aspectScale","areaColor","x","y","x2","y2","colorStops","data","coordinateSystem","rippleEffect","brushType","showEffectOn","r","global","fontWeight","position","para","rich","cnNum","fontSize","symbol","symbolSize","val","a","b","zlevel","init","container","setOption","render","element","width","height","marginTop"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport * as echarts from 'echarts/core';\r\nimport china from 'echarts/lib/chart/map';\r\n\r\nclass Territory extends Component {\r\n\r\n    componentDidMount() {\r\n        const outname = [\"南海诸岛\", '北京', '天津', '上海', '重庆', '河北', '河南', '云南', '辽宁', '黑龙江', '湖南', '安徽', '山东', '新疆', '江苏', '浙江', '江西', '湖北', '广西', '甘肃', '山西', '内蒙古', '陕西', '吉林', '福建', '贵州', '广东', '青海', '西藏', '四川', '宁夏', '海南', '台湾', '香港', '澳门'];\r\n        const outvalue = [0, 524, 13, 140, 75, 13, 83, 11, 19, 15, 69, 260, 39, 4, 31, 104, 36, 1052, 33, 347, 9, 157, 22, 4, 18, 5, 2398, 41, 0, 484, 404, 22, 3, 5, 225];\r\n        const outdata = [];\r\n        let max = 6000, min = 10;\r\n        let maxSize4Pin = 100, minSize4Pin = 20;\r\n        for (let i = 0; i < outname.length; i++) {\r\n            outdata.push({\r\n                name: outname[i],\r\n                value: outvalue[i]\r\n            })\r\n        }\r\n        const geoCoordMap = {};\r\n        /*获取地图数据*/\r\n        const mapFeatures = echarts.getMap('china').geoJson.features;\r\n        mapFeatures.forEach(function(v) {\r\n            console.info(v)\r\n            // 地区名称\r\n            const name = v.properties.name;\r\n            // 地区经纬度\r\n            geoCoordMap[name] = v.properties.cp;\r\n\r\n        });\r\n        const convertData = function(outdata) {\r\n            const res = [];\r\n            for (let i = 0; i < outdata.length; i++) {\r\n                const geoCoord = geoCoordMap[outdata[i].name];\r\n                if (geoCoord) {\r\n                    res.push({\r\n                        name: outdata[i].name,\r\n                        value: geoCoord.concat(outdata[i].value),\r\n                    });\r\n                }\r\n            }\r\n            return res;\r\n        };\r\n        const option = {\r\n            backgroundColor: '#0F1C3C',\r\n            tooltip: {\r\n                show: true,\r\n                formatter: function(params) {\r\n                    if (params.value.length > 1) {\r\n                        return '&nbsp;&nbsp;' + params.name + '&nbsp;&nbsp;&nbsp;' + params.value[2] + '人&nbsp;&nbsp;';\r\n                    } else {\r\n                        return '&nbsp;&nbsp;' + params.name + '&nbsp;&nbsp;&nbsp;' + params.value + '人&nbsp;&nbsp;';\r\n                    }\r\n                },\r\n\r\n            },\r\n\r\n            geo: {\r\n                map: 'china',\r\n                show: true,\r\n                roam: false,\r\n                label: {\r\n                    emphasis: {\r\n                        show: false\r\n                    }\r\n                },\r\n                layoutSize: \"100%\",\r\n                itemStyle: {\r\n                    normal: {\r\n                        borderColor: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\r\n                            offset: 0,\r\n                            color: '#00F6FF'\r\n                        }, {\r\n                            offset: 1,\r\n                            color: '#53D9FF'\r\n                        }], false),\r\n                        borderWidth: 3,\r\n                        shadowColor: 'rgba(10,76,139,1)',\r\n                        shadowOffsetY: 0,\r\n                        shadowBlur: 60\r\n                    }\r\n                }\r\n            },\r\n            series: [{\r\n                type: 'map',\r\n                map: 'china',\r\n                aspectScale: 0.75,\r\n                //zoom:1.1,\r\n                label: {\r\n                    normal: {\r\n                        show: false,\r\n                    },\r\n                    emphasis: {\r\n                        show: false,\r\n                    }\r\n                },\r\n                itemStyle: {\r\n                    normal: {\r\n                        areaColor: {\r\n                            x: 0,\r\n                            y: 0,\r\n                            x2: 0,\r\n                            y2: 1,\r\n                            colorStops: [{\r\n                                offset: 0,\r\n                                color: '#073684' // 0% 处的颜色\r\n                            }, {\r\n                                offset: 1,\r\n                                color: '#061E3D' // 100% 处的颜色\r\n                            }],\r\n                        },\r\n                        borderColor: '#215495',\r\n                        borderWidth: 1,\r\n                    },\r\n                    emphasis: {\r\n                        areaColor: {\r\n\r\n                            x: 0,\r\n                            y: 0,\r\n                            x2: 0,\r\n                            y2: 1,\r\n                            colorStops: [{\r\n                                offset: 0,\r\n                                color: '#073684' // 0% 处的颜色\r\n                            }, {\r\n                                offset: 1,\r\n                                color: '#061E3D' // 100% 处的颜色\r\n                            }],\r\n                        },\r\n                    }\r\n                },\r\n                data: outdata,\r\n            }, {\r\n                type: 'effectScatter',\r\n                coordinateSystem: 'geo',\r\n                rippleEffect: {\r\n                    brushType: 'stroke'\r\n                },\r\n                showEffectOn: 'render',\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: {\r\n                            type: 'radial',\r\n                            x: 0.5,\r\n                            y: 0.5,\r\n                            r: 0.5,\r\n                            colorStops: [{\r\n                                offset: 0,\r\n                                color: 'rgba(5,80,151,0.2)'\r\n                            }, {\r\n                                offset: 0.8,\r\n                                color: 'rgba(5,80,151,0.8)'\r\n                            }, {\r\n                                offset: 1,\r\n                                color: 'rgba(0,108,255,0.7)'\r\n                            }],\r\n                            global: false // 缺省为 false\r\n                        },\r\n                    }\r\n\r\n                },\r\n                label: {\r\n                    normal: {\r\n                        show: true,\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        position: 'inside',\r\n                        formatter: function(para) {\r\n                            return '{cnNum|' + para.data.value[2] + '}'\r\n                        },\r\n                        rich: {\r\n                            cnNum: {\r\n                                fontSize: 13,\r\n                                color: '#D4EEFF',\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                symbol: 'circle',\r\n                symbolSize: function(val) {\r\n                    if (val[2] === 0) {\r\n                        return 0;\r\n                    }\r\n                    const a = (maxSize4Pin - minSize4Pin) / (max - min);\r\n                    const b = maxSize4Pin - a * max;\r\n                    return a * val[2] + b * 1.2;\r\n                },\r\n                data: convertData(outdata),\r\n                zlevel: 1,\r\n            }]\r\n        };\r\n        echarts.init(this.container).setOption(option);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={element => {\r\n                this.container = element\r\n            }} style={{width: '630px', height: '428px', marginTop: '20px'}}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Territory;\r\n"]},"metadata":{},"sourceType":"module"}