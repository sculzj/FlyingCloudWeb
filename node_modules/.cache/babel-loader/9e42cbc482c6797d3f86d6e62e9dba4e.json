{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebStorm Project\\\\flowingcloud\\\\src\\\\components\\\\View\\\\Territory\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport * as echarts from 'echarts/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Territory extends Component {\n  componentDidMount() {\n    const outname = [\"南海诸岛\", '北京', '天津', '上海', '重庆', '河北', '河南', '云南', '辽宁', '黑龙江', '湖南', '安徽', '山东', '新疆', '江苏', '浙江', '江西', '湖北', '广西', '甘肃', '山西', '内蒙古', '陕西', '吉林', '福建', '贵州', '广东', '青海', '西藏', '四川', '宁夏', '海南', '台湾', '香港', '澳门'];\n    const outvalue = [0, 524, 13, 140, 75, 13, 83, 11, 19, 15, 69, 260, 39, 4, 31, 104, 36, 1052, 33, 347, 9, 157, 22, 4, 18, 5, 2398, 41, 0, 484, 404, 22, 3, 5, 225];\n    const outdata = [];\n    let max = 6000,\n        min = 10;\n    let maxSize4Pin = 100,\n        minSize4Pin = 20;\n\n    for (let i = 0; i < outname.length; i++) {\n      outdata.push({\n        name: outname[i],\n        value: outvalue[i]\n      });\n    }\n\n    const geoCoordMap = {};\n    /*获取地图数据*/\n\n    const mapFeatures = echarts.getMap('china').geoJson.features;\n    mapFeatures.forEach(function (v) {\n      console.info(v); // 地区名称\n\n      const name = v.properties.name; // 地区经纬度\n\n      geoCoordMap[name] = v.properties.cp;\n    });\n\n    const convertData = function (outdata) {\n      const res = [];\n\n      for (let i = 0; i < outdata.length; i++) {\n        const geoCoord = geoCoordMap[outdata[i].name];\n\n        if (geoCoord) {\n          res.push({\n            name: outdata[i].name,\n            value: geoCoord.concat(outdata[i].value)\n          });\n        }\n      }\n\n      return res;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Territory;","map":{"version":3,"sources":["D:/WebStorm Project/flowingcloud/src/components/View/Territory/index.jsx"],"names":["React","Component","echarts","Territory","componentDidMount","outname","outvalue","outdata","max","min","maxSize4Pin","minSize4Pin","i","length","push","name","value","geoCoordMap","mapFeatures","getMap","geoJson","features","forEach","v","console","info","properties","cp","convertData","res","geoCoord","concat","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport * as echarts from 'echarts/core';\r\n\r\nclass Territory extends Component {\r\n\r\n    componentDidMount() {\r\n        const outname = [\"南海诸岛\", '北京', '天津', '上海', '重庆', '河北', '河南', '云南', '辽宁', '黑龙江', '湖南', '安徽', '山东', '新疆', '江苏', '浙江', '江西', '湖北', '广西', '甘肃', '山西', '内蒙古', '陕西', '吉林', '福建', '贵州', '广东', '青海', '西藏', '四川', '宁夏', '海南', '台湾', '香港', '澳门'];\r\n        const outvalue = [0, 524, 13, 140, 75, 13, 83, 11, 19, 15, 69, 260, 39, 4, 31, 104, 36, 1052, 33, 347, 9, 157, 22, 4, 18, 5, 2398, 41, 0, 484, 404, 22, 3, 5, 225];\r\n        const outdata = [];\r\n\r\n        let max = 6000, min = 10;\r\n        let maxSize4Pin = 100, minSize4Pin = 20;\r\n\r\n        for (let i = 0; i < outname.length; i++) {\r\n            outdata.push({\r\n                name: outname[i],\r\n                value: outvalue[i]\r\n            })\r\n        }\r\n\r\n        const geoCoordMap = {};\r\n        /*获取地图数据*/\r\n        const mapFeatures = echarts.getMap('china').geoJson.features;\r\n        mapFeatures.forEach(function(v) {\r\n            console.info(v)\r\n            // 地区名称\r\n            const name = v.properties.name;\r\n            // 地区经纬度\r\n            geoCoordMap[name] = v.properties.cp;\r\n\r\n        });\r\n        const convertData = function(outdata) {\r\n            const res = [];\r\n            for (let i = 0; i < outdata.length; i++) {\r\n                const geoCoord = geoCoordMap[outdata[i].name];\r\n                if (geoCoord) {\r\n                    res.push({\r\n                        name: outdata[i].name,\r\n                        value: geoCoord.concat(outdata[i].value),\r\n                    });\r\n                }\r\n            }\r\n            return res;\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Territory;\r\n"]},"metadata":{},"sourceType":"module"}