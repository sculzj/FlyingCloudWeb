{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebStorm Project\\\\flowingcloud\\\\src\\\\pages\\\\Admin\\\\View\\\\Territory\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport * as echarts from 'echarts/core';\nimport 'echarts/map/js/china';\nimport { MapChart, EffectScatterChart } from 'echarts/charts';\nimport { TitleComponent, TooltipComponent, GeoComponent } from 'echarts/components';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\necharts.use([MapChart, EffectScatterChart, TitleComponent, TooltipComponent, GeoComponent, CanvasRenderer]);\n\nclass Territory extends Component {\n  componentDidMount() {\n    const outname = ['北京', '浙江', '四川', '广东', '陕西'];\n    const outvalue = [2210, 1210, 2650, 2100, 890];\n    const outdata = [];\n    let max = 6000,\n        min = 10;\n    let maxSize4Pin = 100,\n        minSize4Pin = 20;\n\n    for (let i = 0; i < outname.length; i++) {\n      outdata.push({\n        name: outname[i],\n        value: outvalue[i]\n      });\n    }\n\n    const geoCoordMap = {};\n    /*获取地图数据*/\n\n    const mapFeatures = echarts.getMap('china').geoJson.features;\n    mapFeatures.forEach(function (v) {\n      // 地区名称\n      const name = v.properties.name; // 地区经纬度\n\n      geoCoordMap[name] = v.properties.cp;\n    });\n\n    const convertData = function (outdata) {\n      const res = [];\n\n      for (let i = 0; i < outdata.length; i++) {\n        const geoCoord = geoCoordMap[outdata[i].name];\n\n        if (geoCoord) {\n          res.push({\n            name: outdata[i].name,\n            value: geoCoord.concat(outdata[i].value)\n          });\n        }\n      }\n\n      return res;\n    };\n\n    const option = {\n      title: {\n        text: 'XX热力分布图',\n        left: 'center',\n        top: 15,\n        textStyle: {\n          color: 'white',\n          fontSize: 24\n        }\n      },\n      geo: {\n        map: 'china',\n        show: true,\n        roam: false,\n        layoutSize: \"110%\",\n        itemStyle: {\n          borderColor: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: '#00F6FF'\n          }, {\n            offset: 1,\n            color: '#53D9FF'\n          }], false),\n          borderWidth: 2,\n          shadowColor: 'rgba(10,76,139,1)',\n          shadowOffsetY: 0,\n          shadowBlur: 60\n        }\n      },\n      series: [{\n        type: 'map',\n        map: 'china',\n        aspectScale: 0.75,\n        label: {\n          show: false\n        },\n        itemStyle: {\n          areaColor: {\n            x: 0,\n            y: 0,\n            x2: 0,\n            y2: 1,\n            colorStops: [{\n              offset: 0,\n              color: '#073684' // 0% 处的颜色\n\n            }, {\n              offset: 1,\n              color: '#061E3D' // 100% 处的颜色\n\n            }]\n          },\n          borderColor: '#215495',\n          borderWidth: 1\n        },\n        data: outdata\n      }, {\n        type: 'effectScatter',\n        coordinateSystem: 'geo',\n        rippleEffect: {\n          brushType: 'stroke'\n        },\n        showEffectOn: 'render',\n        itemStyle: {\n          color: {\n            type: 'radial',\n            x: 0.5,\n            y: 0.5,\n            r: 0.5,\n            colorStops: [{\n              offset: 0,\n              color: 'rgba(5,80,151,0.2)'\n            }, {\n              offset: 0.8,\n              color: 'rgba(5,80,151,0.8)'\n            }, {\n              offset: 1,\n              color: 'rgba(0,108,255,0.7)'\n            }],\n            global: false // 缺省为 false\n\n          }\n        },\n        label: {\n          show: true,\n          color: '#fff',\n          fontWeight: 'normal',\n          x: '50%',\n          y: '50%',\n          formatter: function (para) {\n            return `${para.name} ${para.data.value[2]}人`;\n          }\n        },\n        symbol: 'circle',\n        symbolSize: function (val) {\n          if (val[2] === 0) {\n            return 0;\n          }\n\n          const a = (maxSize4Pin - minSize4Pin) / (max - min);\n          const b = maxSize4Pin - a * max;\n          return a * val[2] + b * 1.2;\n        },\n        data: convertData(outdata),\n        zlevel: 1\n      }]\n    };\n    echarts.init(this.container).setOption(option);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: element => {\n        this.container = element;\n      },\n      style: {\n        width: '870px',\n        height: '628px',\n        position: 'absolute',\n        top: '184px',\n        left: '656px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Territory;","map":{"version":3,"sources":["D:/WebStorm Project/flowingcloud/src/pages/Admin/View/Territory/index.jsx"],"names":["React","Component","echarts","MapChart","EffectScatterChart","TitleComponent","TooltipComponent","GeoComponent","CanvasRenderer","use","Territory","componentDidMount","outname","outvalue","outdata","max","min","maxSize4Pin","minSize4Pin","i","length","push","name","value","geoCoordMap","mapFeatures","getMap","geoJson","features","forEach","v","properties","cp","convertData","res","geoCoord","concat","option","title","text","left","top","textStyle","color","fontSize","geo","map","show","roam","layoutSize","itemStyle","borderColor","graphic","LinearGradient","offset","borderWidth","shadowColor","shadowOffsetY","shadowBlur","series","type","aspectScale","label","areaColor","x","y","x2","y2","colorStops","data","coordinateSystem","rippleEffect","brushType","showEffectOn","r","global","fontWeight","formatter","para","symbol","symbolSize","val","a","b","zlevel","init","container","setOption","render","element","width","height","position"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport * as echarts from 'echarts/core';\r\nimport 'echarts/map/js/china';\r\nimport {MapChart, EffectScatterChart} from 'echarts/charts';\r\nimport {TitleComponent,TooltipComponent,GeoComponent} from 'echarts/components';\r\nimport {CanvasRenderer} from 'echarts/renderers'\r\n\r\necharts.use([MapChart, EffectScatterChart,TitleComponent,TooltipComponent,GeoComponent,CanvasRenderer]);\r\n\r\nclass Territory extends Component {\r\n\r\n    componentDidMount() {\r\n        const outname = ['北京', '浙江', '四川', '广东', '陕西'];\r\n        const outvalue = [2210, 1210, 2650, 2100, 890];\r\n        const outdata = [];\r\n        let max = 6000, min = 10;\r\n        let maxSize4Pin = 100, minSize4Pin = 20;\r\n        for (let i = 0; i < outname.length; i++) {\r\n            outdata.push({\r\n                name: outname[i],\r\n                value: outvalue[i]\r\n            })\r\n        }\r\n        const geoCoordMap = {};\r\n        /*获取地图数据*/\r\n        const mapFeatures = echarts.getMap('china').geoJson.features;\r\n        mapFeatures.forEach(function (v) {\r\n            // 地区名称\r\n            const name = v.properties.name;\r\n            // 地区经纬度\r\n            geoCoordMap[name] = v.properties.cp;\r\n\r\n        });\r\n        const convertData = function (outdata) {\r\n            const res = [];\r\n            for (let i = 0; i < outdata.length; i++) {\r\n                const geoCoord = geoCoordMap[outdata[i].name];\r\n                if (geoCoord) {\r\n                    res.push({\r\n                        name: outdata[i].name,\r\n                        value: geoCoord.concat(outdata[i].value),\r\n                    });\r\n                }\r\n            }\r\n            return res;\r\n        };\r\n        const option = {\r\n            title: {\r\n                text: 'XX热力分布图',\r\n                left: 'center',\r\n                top: 15,\r\n                textStyle: {\r\n                    color: 'white',\r\n                    fontSize:24\r\n                }\r\n            },\r\n            geo: {\r\n                map: 'china',\r\n                show: true,\r\n                roam: false,\r\n                layoutSize: \"110%\",\r\n                itemStyle: {\r\n                    borderColor: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                        {\r\n                            offset: 0,\r\n                            color: '#00F6FF'\r\n                        },\r\n                        {\r\n                            offset: 1,\r\n                            color: '#53D9FF'\r\n                        }\r\n                    ], false),\r\n                    borderWidth: 2,\r\n                    shadowColor: 'rgba(10,76,139,1)',\r\n                    shadowOffsetY: 0,\r\n                    shadowBlur: 60\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'map',\r\n                    map: 'china',\r\n                    aspectScale: 0.75,\r\n                    label: {\r\n                        show: false\r\n                    },\r\n                    itemStyle: {\r\n                        areaColor: {\r\n                            x: 0,\r\n                            y: 0,\r\n                            x2: 0,\r\n                            y2: 1,\r\n                            colorStops: [{\r\n                                offset: 0,\r\n                                color: '#073684' // 0% 处的颜色\r\n                            }, {\r\n                                offset: 1,\r\n                                color: '#061E3D' // 100% 处的颜色\r\n                            }],\r\n                        },\r\n                        borderColor: '#215495',\r\n                        borderWidth: 1,\r\n                    },\r\n                    data: outdata,\r\n                },\r\n                {\r\n                    type: 'effectScatter',\r\n                    coordinateSystem: 'geo',\r\n                    rippleEffect: {\r\n                        brushType: 'stroke'\r\n                    },\r\n                    showEffectOn: 'render',\r\n                    itemStyle: {\r\n                        color: {\r\n                            type: 'radial',\r\n                            x: 0.5,\r\n                            y: 0.5,\r\n                            r: 0.5,\r\n                            colorStops: [{\r\n                                offset: 0,\r\n                                color: 'rgba(5,80,151,0.2)'\r\n                            }, {\r\n                                offset: 0.8,\r\n                                color: 'rgba(5,80,151,0.8)'\r\n                            }, {\r\n                                offset: 1,\r\n                                color: 'rgba(0,108,255,0.7)'\r\n                            }],\r\n                            global: false // 缺省为 false\r\n                        },\r\n                    },\r\n                    label: {\r\n                        show: true,\r\n                        color: '#fff',\r\n                        fontWeight: 'normal',\r\n                        x:'50%',\r\n                        y:'50%',\r\n                        formatter: function (para) {\r\n                            return `${para.name} ${para.data.value[2]}人`;\r\n                        }\r\n                    },\r\n                    symbol: 'circle',\r\n                    symbolSize: function (val) {\r\n                        if (val[2] === 0) {\r\n                            return 0;\r\n                        }\r\n                        const a = (maxSize4Pin - minSize4Pin) / (max - min);\r\n                        const b = maxSize4Pin - a * max;\r\n                        return a * val[2] + b * 1.2;\r\n                    },\r\n                    data: convertData(outdata),\r\n                    zlevel: 1,\r\n                }\r\n            ]\r\n        };\r\n        echarts.init(this.container).setOption(option);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={element => {\r\n                this.container = element\r\n            }} style={{width: '870px', height: '628px', position: 'absolute', top: '184px', left: '656px'}}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Territory;\r\n"]},"metadata":{},"sourceType":"module"}