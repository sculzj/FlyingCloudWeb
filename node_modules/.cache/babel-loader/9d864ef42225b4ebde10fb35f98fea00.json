{"ast":null,"code":"\"use strict\";\n/**\n * @file 地图各子组件的高阶组件，用来处理绑定事件、属性等公共操作\n * @author hedongran\n * @email hdr01@126.com\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleMethods = exports.unregisterEvents = exports.registerEvents = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar shallowequal_1 = tslib_1.__importDefault(require(\"shallowequal\"));\n\nfunction registerEvents(component, instance, eventsMap) {\n  if (eventsMap && instance && instance.addEventListener) {\n    component.registeredEvents = {};\n    eventsMap.forEach(function (key) {\n      var methodName = \"on\" + key.substr(0, 1).toUpperCase() + key.substr(1);\n\n      if (component.props[methodName] && typeof component.props[methodName] === 'function') {\n        instance.addEventListener(key, component.props[methodName]);\n        component.registeredEvents[key] = component.props[methodName];\n      }\n    });\n  }\n}\n\nexports.registerEvents = registerEvents;\n\nfunction unregisterEvents(component, instance) {\n  if (component.registeredEvents && instance && instance.removeEventListener) {\n    Object.keys(component.registeredEvents).forEach(function (key) {\n      instance.removeEventListener(key, component.registeredEvents[key]);\n    });\n    component.registeredEvents = null;\n  }\n}\n\nexports.unregisterEvents = unregisterEvents;\n\nfunction toggleMethods(component, instance, methodsMap, prevProps) {\n  if (methodsMap && instance) {\n    Object.keys(methodsMap).forEach(function (key) {\n      // 当在 componentDidMount 和 componentDidUpdate 时分别执行\n      if (prevProps === undefined && component.props[key] !== undefined || prevProps !== undefined && !shallowequal_1.default(component.props[key], prevProps[key])) {\n        if (component.props[key]) {\n          instance && instance[methodsMap[key][0]]();\n        } else {\n          instance && instance[methodsMap[key][1]]();\n        }\n      }\n    });\n  }\n}\n\nexports.toggleMethods = toggleMethods;\n/**\n * 给子组件绑定需要切换的属性对应的方法\n * @param {Component} component 子组件\n * @param {Methods} methodsMap 属性和对应的2个切换方法\n * @return 修改过后的子组件\n */\n\nfunction wrapMethods(component, methodsMap) {\n  var getInstance = component['prototype'].getInstance;\n  var componentDidMount = component['prototype'].componentDidMount;\n  var componentDidUpdate = component['prototype'].componentDidUpdate;\n\n  if (!getInstance) {\n    return component;\n  }\n\n  if (methodsMap && Object.keys(methodsMap).length > 0) {\n    component['prototype'].componentDidMount = function () {\n      if (componentDidMount) {\n        componentDidMount.call(this);\n      }\n\n      toggleMethods(this, getInstance(this), methodsMap);\n    };\n\n    component['prototype'].componentDidUpdate = function (prevProps, prevState) {\n      toggleMethods(this, getInstance(this), methodsMap, prevProps);\n\n      if (componentDidUpdate) {\n        componentDidUpdate.call(this, prevProps, prevState);\n      }\n    };\n  }\n\n  return component;\n}\n/**\n * 给子组件绑定对应需要的事件\n * @param {Component} component 子组件\n * @param {Events} eventsMap 事件名数组\n * @return 修改过后的子组件\n */\n\n\nfunction wrapEvents(component, eventsMap) {\n  var getInstance = component['prototype'].getInstance;\n  var componentDidUpdate = component['prototype'].componentDidUpdate;\n  var componentDidMount = component['prototype'].componentDidMount;\n  var componentWillUnmount = component['prototype'].componentWillUnmount;\n\n  if (eventsMap && eventsMap.length > 0) {\n    component['prototype'].componentDidMount = function () {\n      if (componentDidMount) {\n        componentDidMount.call(this);\n      }\n\n      registerEvents(this, getInstance(this), eventsMap);\n    };\n\n    component['prototype'].componentDidUpdate = function (prevProps, prevState) {\n      if (!shallowequal_1.default(this.props, prevProps)) {\n        unregisterEvents(this, getInstance(this));\n      }\n\n      if (componentDidUpdate) {\n        componentDidUpdate.call(this, prevProps, prevState);\n      }\n\n      if (!shallowequal_1.default(this.props, prevProps)) {\n        registerEvents(this, getInstance(this), eventsMap);\n      }\n    };\n\n    component['prototype'].componentWillUnmount = function () {\n      unregisterEvents(this, getInstance(this));\n\n      if (componentWillUnmount) {\n        componentWillUnmount.call(this);\n      }\n    };\n  }\n\n  return component;\n}\n\nfunction Wrapper(Component, eventsMap, methodsMap) {\n  var component = wrapMethods(Component, methodsMap);\n  component = wrapEvents(component, eventsMap);\n  return component;\n}\n\nexports.default = Wrapper;","map":{"version":3,"sources":["D:/WebStorm Project/flowingcloud/node_modules/react-bmapgl/common/WrapperHOC.js"],"names":["Object","defineProperty","exports","value","toggleMethods","unregisterEvents","registerEvents","tslib_1","require","shallowequal_1","__importDefault","component","instance","eventsMap","addEventListener","registeredEvents","forEach","key","methodName","substr","toUpperCase","props","removeEventListener","keys","methodsMap","prevProps","undefined","default","wrapMethods","getInstance","componentDidMount","componentDidUpdate","length","call","prevState","wrapEvents","componentWillUnmount","Wrapper","Component"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @file 地图各子组件的高阶组件，用来处理绑定事件、属性等公共操作\n * @author hedongran\n * @email hdr01@126.com\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toggleMethods = exports.unregisterEvents = exports.registerEvents = void 0;\nvar tslib_1 = require(\"tslib\");\nvar shallowequal_1 = tslib_1.__importDefault(require(\"shallowequal\"));\nfunction registerEvents(component, instance, eventsMap) {\n    if (eventsMap && instance && instance.addEventListener) {\n        component.registeredEvents = {};\n        eventsMap.forEach(function (key) {\n            var methodName = \"on\" + key.substr(0, 1).toUpperCase() + key.substr(1);\n            if (component.props[methodName] && typeof component.props[methodName] === 'function') {\n                instance.addEventListener(key, component.props[methodName]);\n                component.registeredEvents[key] = component.props[methodName];\n            }\n        });\n    }\n}\nexports.registerEvents = registerEvents;\nfunction unregisterEvents(component, instance) {\n    if (component.registeredEvents && instance && instance.removeEventListener) {\n        Object.keys(component.registeredEvents).forEach(function (key) {\n            instance.removeEventListener(key, component.registeredEvents[key]);\n        });\n        component.registeredEvents = null;\n    }\n}\nexports.unregisterEvents = unregisterEvents;\nfunction toggleMethods(component, instance, methodsMap, prevProps) {\n    if (methodsMap && instance) {\n        Object.keys(methodsMap).forEach(function (key) {\n            // 当在 componentDidMount 和 componentDidUpdate 时分别执行\n            if ((prevProps === undefined && component.props[key] !== undefined)\n                || (prevProps !== undefined && !shallowequal_1.default(component.props[key], prevProps[key]))) {\n                if (component.props[key]) {\n                    instance && instance[methodsMap[key][0]]();\n                }\n                else {\n                    instance && instance[methodsMap[key][1]]();\n                }\n            }\n        });\n    }\n}\nexports.toggleMethods = toggleMethods;\n/**\n * 给子组件绑定需要切换的属性对应的方法\n * @param {Component} component 子组件\n * @param {Methods} methodsMap 属性和对应的2个切换方法\n * @return 修改过后的子组件\n */\nfunction wrapMethods(component, methodsMap) {\n    var getInstance = component['prototype'].getInstance;\n    var componentDidMount = component['prototype'].componentDidMount;\n    var componentDidUpdate = component['prototype'].componentDidUpdate;\n    if (!getInstance) {\n        return component;\n    }\n    if (methodsMap && Object.keys(methodsMap).length > 0) {\n        component['prototype'].componentDidMount = function () {\n            if (componentDidMount) {\n                componentDidMount.call(this);\n            }\n            toggleMethods(this, getInstance(this), methodsMap);\n        };\n        component['prototype'].componentDidUpdate = function (prevProps, prevState) {\n            toggleMethods(this, getInstance(this), methodsMap, prevProps);\n            if (componentDidUpdate) {\n                componentDidUpdate.call(this, prevProps, prevState);\n            }\n        };\n    }\n    return component;\n}\n/**\n * 给子组件绑定对应需要的事件\n * @param {Component} component 子组件\n * @param {Events} eventsMap 事件名数组\n * @return 修改过后的子组件\n */\nfunction wrapEvents(component, eventsMap) {\n    var getInstance = component['prototype'].getInstance;\n    var componentDidUpdate = component['prototype'].componentDidUpdate;\n    var componentDidMount = component['prototype'].componentDidMount;\n    var componentWillUnmount = component['prototype'].componentWillUnmount;\n    if (eventsMap && eventsMap.length > 0) {\n        component['prototype'].componentDidMount = function () {\n            if (componentDidMount) {\n                componentDidMount.call(this);\n            }\n            registerEvents(this, getInstance(this), eventsMap);\n        };\n        component['prototype'].componentDidUpdate = function (prevProps, prevState) {\n            if (!shallowequal_1.default(this.props, prevProps)) {\n                unregisterEvents(this, getInstance(this));\n            }\n            if (componentDidUpdate) {\n                componentDidUpdate.call(this, prevProps, prevState);\n            }\n            if (!shallowequal_1.default(this.props, prevProps)) {\n                registerEvents(this, getInstance(this), eventsMap);\n            }\n        };\n        component['prototype'].componentWillUnmount = function () {\n            unregisterEvents(this, getInstance(this));\n            if (componentWillUnmount) {\n                componentWillUnmount.call(this);\n            }\n        };\n    }\n    return component;\n}\nfunction Wrapper(Component, eventsMap, methodsMap) {\n    var component = wrapMethods(Component, methodsMap);\n    component = wrapEvents(component, eventsMap);\n    return component;\n}\nexports.default = Wrapper;\n"]},"metadata":{},"sourceType":"script"}