{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __assign, __extends } from \"tslib\";\nimport { extend, retrieve3 } from 'zrender/lib/core/util';\nimport * as graphic from '../../util/graphic';\nimport { setStatesStylesFromModel, enableHoverEmphasis } from '../../util/states';\nimport ChartView from '../../view/Chart';\nimport labelLayout from './labelLayout';\nimport { setLabelLineStyle, getLabelLineStatesModels } from '../../label/labelGuideHelper';\nimport { setLabelStyle, getLabelStatesModels } from '../../label/labelStyle';\nimport { getSectorCornerRadius } from '../helper/pieHelper';\n/**\n * Piece of pie including Sector, Label, LabelLine\n */\n\nvar PiePiece =\n/** @class */\nfunction (_super) {\n  __extends(PiePiece, _super);\n\n  function PiePiece(data, idx, startAngle) {\n    var _this = _super.call(this) || this;\n\n    _this.z2 = 2;\n    var polyline = new graphic.Polyline();\n    var text = new graphic.Text();\n\n    _this.setTextGuideLine(polyline);\n\n    _this.setTextContent(text);\n\n    _this.updateData(data, idx, startAngle, true);\n\n    return _this;\n  }\n\n  PiePiece.prototype.updateData = function (data, idx, startAngle, firstCreate) {\n    var sector = this;\n    var seriesModel = data.hostModel;\n    var itemModel = data.getItemModel(idx);\n    var emphasisModel = itemModel.getModel('emphasis');\n    var layout = data.getItemLayout(idx);\n    var sectorShape = extend(getSectorCornerRadius(itemModel.getModel('itemStyle'), layout) || {}, layout); // Ignore NaN data.\n\n    if (isNaN(sectorShape.startAngle)) {\n      // Use NaN shape to avoid drawing shape.\n      sector.setShape(sectorShape);\n      return;\n    }\n\n    if (firstCreate) {\n      sector.setShape(sectorShape);\n      var animationType = seriesModel.getShallow('animationType');\n\n      if (animationType === 'scale') {\n        sector.shape.r = layout.r0;\n        graphic.initProps(sector, {\n          shape: {\n            r: layout.r\n          }\n        }, seriesModel, idx);\n      } // Expansion\n      else {\n          if (startAngle != null) {\n            sector.setShape({\n              startAngle: startAngle,\n              endAngle: startAngle\n            });\n            graphic.initProps(sector, {\n              shape: {\n                startAngle: layout.startAngle,\n                endAngle: layout.endAngle\n              }\n            }, seriesModel, idx);\n          } else {\n            sector.shape.endAngle = layout.startAngle;\n            graphic.updateProps(sector, {\n              shape: {\n                endAngle: layout.endAngle\n              }\n            }, seriesModel, idx);\n          }\n        }\n    } else {\n      // Transition animation from the old shape\n      graphic.updateProps(sector, {\n        shape: sectorShape\n      }, seriesModel, idx);\n    }\n\n    sector.useStyle(data.getItemVisual(idx, 'style'));\n    setStatesStylesFromModel(sector, itemModel);\n    var midAngle = (layout.startAngle + layout.endAngle) / 2;\n    var offset = seriesModel.get('selectedOffset');\n    var dx = Math.cos(midAngle) * offset;\n    var dy = Math.sin(midAngle) * offset;\n    var cursorStyle = itemModel.getShallow('cursor');\n    cursorStyle && sector.attr('cursor', cursorStyle);\n\n    this._updateLabel(seriesModel, data, idx);\n\n    sector.ensureState('emphasis').shape = __assign({\n      r: layout.r + (emphasisModel.get('scale') ? emphasisModel.get('scaleSize') || 0 : 0)\n    }, getSectorCornerRadius(emphasisModel.getModel('itemStyle'), layout));\n    extend(sector.ensureState('select'), {\n      x: dx,\n      y: dy,\n      shape: getSectorCornerRadius(itemModel.getModel(['select', 'itemStyle']), layout)\n    });\n    extend(sector.ensureState('blur'), {\n      shape: getSectorCornerRadius(itemModel.getModel(['blur', 'itemStyle']), layout)\n    });\n    var labelLine = sector.getTextGuideLine();\n    var labelText = sector.getTextContent();\n    labelLine && extend(labelLine.ensureState('select'), {\n      x: dx,\n      y: dy\n    }); // TODO: needs dx, dy in zrender?\n\n    extend(labelText.ensureState('select'), {\n      x: dx,\n      y: dy\n    });\n    enableHoverEmphasis(this, emphasisModel.get('focus'), emphasisModel.get('blurScope'));\n  };\n\n  PiePiece.prototype._updateLabel = function (seriesModel, data, idx) {\n    var _a;\n\n    var sector = this;\n    var itemModel = data.getItemModel(idx);\n    var labelLineModel = itemModel.getModel('labelLine');\n    var style = data.getItemVisual(idx, 'style');\n    var visualColor = style && style.fill;\n    var visualOpacity = style && style.opacity;\n    setLabelStyle(sector, getLabelStatesModels(itemModel), {\n      labelFetcher: data.hostModel,\n      labelDataIndex: idx,\n      inheritColor: visualColor,\n      defaultOpacity: visualOpacity,\n      defaultText: seriesModel.getFormattedLabel(idx, 'normal') || data.getName(idx)\n    });\n    var labelText = sector.getTextContent(); // Set textConfig on sector.\n\n    sector.setTextConfig({\n      // reset position, rotation\n      position: null,\n      rotation: null\n    }); // Make sure update style on labelText after setLabelStyle.\n    // Because setLabelStyle will replace a new style on it.\n\n    labelText.attr({\n      z2: 10\n    });\n    var labelPosition = seriesModel.get(['label', 'position']);\n\n    if (labelPosition !== 'outside' && labelPosition !== 'outer') {\n      (_a = sector.getTextGuideLine()) === null || _a === void 0 ? void 0 : _a.hide();\n      return;\n    } // Default use item visual color\n\n\n    setLabelLineStyle(this, getLabelLineStatesModels(itemModel), {\n      stroke: visualColor,\n      opacity: retrieve3(labelLineModel.get(['lineStyle', 'opacity']), visualOpacity, 1)\n    });\n  };\n\n  return PiePiece;\n}(graphic.Sector); // Pie view\n\n\nvar PieView =\n/** @class */\nfunction (_super) {\n  __extends(PieView, _super);\n\n  function PieView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ignoreLabelLineUpdate = true;\n    return _this;\n  }\n\n  PieView.prototype.init = function () {\n    var sectorGroup = new graphic.Group();\n    this._sectorGroup = sectorGroup;\n  };\n\n  PieView.prototype.render = function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var oldData = this._data;\n    var group = this.group;\n    var startAngle; // First render\n\n    if (!oldData && data.count() > 0) {\n      var shape = data.getItemLayout(0);\n\n      for (var s = 1; isNaN(shape && shape.startAngle) && s < data.count(); ++s) {\n        shape = data.getItemLayout(s);\n      }\n\n      if (shape) {\n        startAngle = shape.startAngle;\n      }\n    }\n\n    data.diff(oldData).add(function (idx) {\n      var piePiece = new PiePiece(data, idx, startAngle);\n      data.setItemGraphicEl(idx, piePiece);\n      group.add(piePiece);\n    }).update(function (newIdx, oldIdx) {\n      var piePiece = oldData.getItemGraphicEl(oldIdx);\n      piePiece.updateData(data, newIdx, startAngle);\n      piePiece.off('click');\n      group.add(piePiece);\n      data.setItemGraphicEl(newIdx, piePiece);\n    }).remove(function (idx) {\n      var piePiece = oldData.getItemGraphicEl(idx);\n      graphic.removeElementWithFadeOut(piePiece, seriesModel, idx);\n    }).execute();\n    labelLayout(seriesModel); // Always use initial animation.\n\n    if (seriesModel.get('animationTypeUpdate') !== 'expansion') {\n      this._data = data;\n    }\n  };\n\n  PieView.prototype.dispose = function () {};\n\n  PieView.prototype.containPoint = function (point, seriesModel) {\n    var data = seriesModel.getData();\n    var itemLayout = data.getItemLayout(0);\n\n    if (itemLayout) {\n      var dx = point[0] - itemLayout.cx;\n      var dy = point[1] - itemLayout.cy;\n      var radius = Math.sqrt(dx * dx + dy * dy);\n      return radius <= itemLayout.r && radius >= itemLayout.r0;\n    }\n  };\n\n  PieView.type = 'pie';\n  return PieView;\n}(ChartView);\n\nexport default PieView;","map":{"version":3,"sources":["D:/WebStorm Project/flowingcloud/node_modules/echarts/lib/chart/pie/PieView.js"],"names":["__assign","__extends","extend","retrieve3","graphic","setStatesStylesFromModel","enableHoverEmphasis","ChartView","labelLayout","setLabelLineStyle","getLabelLineStatesModels","setLabelStyle","getLabelStatesModels","getSectorCornerRadius","PiePiece","_super","data","idx","startAngle","_this","call","z2","polyline","Polyline","text","Text","setTextGuideLine","setTextContent","updateData","prototype","firstCreate","sector","seriesModel","hostModel","itemModel","getItemModel","emphasisModel","getModel","layout","getItemLayout","sectorShape","isNaN","setShape","animationType","getShallow","shape","r","r0","initProps","endAngle","updateProps","useStyle","getItemVisual","midAngle","offset","get","dx","Math","cos","dy","sin","cursorStyle","attr","_updateLabel","ensureState","x","y","labelLine","getTextGuideLine","labelText","getTextContent","_a","labelLineModel","style","visualColor","fill","visualOpacity","opacity","labelFetcher","labelDataIndex","inheritColor","defaultOpacity","defaultText","getFormattedLabel","getName","setTextConfig","position","rotation","labelPosition","hide","stroke","Sector","PieView","apply","arguments","ignoreLabelLineUpdate","init","sectorGroup","Group","_sectorGroup","render","ecModel","api","payload","getData","oldData","_data","group","count","s","diff","add","piePiece","setItemGraphicEl","update","newIdx","oldIdx","getItemGraphicEl","off","remove","removeElementWithFadeOut","execute","dispose","containPoint","point","itemLayout","cx","cy","radius","sqrt","type"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,uBAAlC;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,SAASC,wBAAT,EAAmCC,mBAAnC,QAA8D,mBAA9D;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,iBAAT,EAA4BC,wBAA5B,QAA4D,8BAA5D;AACA,SAASC,aAAT,EAAwBC,oBAAxB,QAAoD,wBAApD;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ;AACZ;AACA,UAAUC,MAAV,EAAkB;AAChBd,EAAAA,SAAS,CAACa,QAAD,EAAWC,MAAX,CAAT;;AAEA,WAASD,QAAT,CAAkBE,IAAlB,EAAwBC,GAAxB,EAA6BC,UAA7B,EAAyC;AACvC,QAAIC,KAAK,GAAGJ,MAAM,CAACK,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;AAEAD,IAAAA,KAAK,CAACE,EAAN,GAAW,CAAX;AACA,QAAIC,QAAQ,GAAG,IAAIlB,OAAO,CAACmB,QAAZ,EAAf;AACA,QAAIC,IAAI,GAAG,IAAIpB,OAAO,CAACqB,IAAZ,EAAX;;AAEAN,IAAAA,KAAK,CAACO,gBAAN,CAAuBJ,QAAvB;;AAEAH,IAAAA,KAAK,CAACQ,cAAN,CAAqBH,IAArB;;AAEAL,IAAAA,KAAK,CAACS,UAAN,CAAiBZ,IAAjB,EAAuBC,GAAvB,EAA4BC,UAA5B,EAAwC,IAAxC;;AAEA,WAAOC,KAAP;AACD;;AAEDL,EAAAA,QAAQ,CAACe,SAAT,CAAmBD,UAAnB,GAAgC,UAAUZ,IAAV,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCY,WAAjC,EAA8C;AAC5E,QAAIC,MAAM,GAAG,IAAb;AACA,QAAIC,WAAW,GAAGhB,IAAI,CAACiB,SAAvB;AACA,QAAIC,SAAS,GAAGlB,IAAI,CAACmB,YAAL,CAAkBlB,GAAlB,CAAhB;AACA,QAAImB,aAAa,GAAGF,SAAS,CAACG,QAAV,CAAmB,UAAnB,CAApB;AACA,QAAIC,MAAM,GAAGtB,IAAI,CAACuB,aAAL,CAAmBtB,GAAnB,CAAb;AACA,QAAIuB,WAAW,GAAGtC,MAAM,CAACW,qBAAqB,CAACqB,SAAS,CAACG,QAAV,CAAmB,WAAnB,CAAD,EAAkCC,MAAlC,CAArB,IAAkE,EAAnE,EAAuEA,MAAvE,CAAxB,CAN4E,CAM4B;;AAExG,QAAIG,KAAK,CAACD,WAAW,CAACtB,UAAb,CAAT,EAAmC;AACjC;AACAa,MAAAA,MAAM,CAACW,QAAP,CAAgBF,WAAhB;AACA;AACD;;AAED,QAAIV,WAAJ,EAAiB;AACfC,MAAAA,MAAM,CAACW,QAAP,CAAgBF,WAAhB;AACA,UAAIG,aAAa,GAAGX,WAAW,CAACY,UAAZ,CAAuB,eAAvB,CAApB;;AAEA,UAAID,aAAa,KAAK,OAAtB,EAA+B;AAC7BZ,QAAAA,MAAM,CAACc,KAAP,CAAaC,CAAb,GAAiBR,MAAM,CAACS,EAAxB;AACA3C,QAAAA,OAAO,CAAC4C,SAAR,CAAkBjB,MAAlB,EAA0B;AACxBc,UAAAA,KAAK,EAAE;AACLC,YAAAA,CAAC,EAAER,MAAM,CAACQ;AADL;AADiB,SAA1B,EAIGd,WAJH,EAIgBf,GAJhB;AAKD,OAPD,CAOE;AAPF,WAQK;AACD,cAAIC,UAAU,IAAI,IAAlB,EAAwB;AACtBa,YAAAA,MAAM,CAACW,QAAP,CAAgB;AACdxB,cAAAA,UAAU,EAAEA,UADE;AAEd+B,cAAAA,QAAQ,EAAE/B;AAFI,aAAhB;AAIAd,YAAAA,OAAO,CAAC4C,SAAR,CAAkBjB,MAAlB,EAA0B;AACxBc,cAAAA,KAAK,EAAE;AACL3B,gBAAAA,UAAU,EAAEoB,MAAM,CAACpB,UADd;AAEL+B,gBAAAA,QAAQ,EAAEX,MAAM,CAACW;AAFZ;AADiB,aAA1B,EAKGjB,WALH,EAKgBf,GALhB;AAMD,WAXD,MAWO;AACLc,YAAAA,MAAM,CAACc,KAAP,CAAaI,QAAb,GAAwBX,MAAM,CAACpB,UAA/B;AACAd,YAAAA,OAAO,CAAC8C,WAAR,CAAoBnB,MAApB,EAA4B;AAC1Bc,cAAAA,KAAK,EAAE;AACLI,gBAAAA,QAAQ,EAAEX,MAAM,CAACW;AADZ;AADmB,aAA5B,EAIGjB,WAJH,EAIgBf,GAJhB;AAKD;AACF;AACJ,KAjCD,MAiCO;AACL;AACAb,MAAAA,OAAO,CAAC8C,WAAR,CAAoBnB,MAApB,EAA4B;AAC1Bc,QAAAA,KAAK,EAAEL;AADmB,OAA5B,EAEGR,WAFH,EAEgBf,GAFhB;AAGD;;AAEDc,IAAAA,MAAM,CAACoB,QAAP,CAAgBnC,IAAI,CAACoC,aAAL,CAAmBnC,GAAnB,EAAwB,OAAxB,CAAhB;AACAZ,IAAAA,wBAAwB,CAAC0B,MAAD,EAASG,SAAT,CAAxB;AACA,QAAImB,QAAQ,GAAG,CAACf,MAAM,CAACpB,UAAP,GAAoBoB,MAAM,CAACW,QAA5B,IAAwC,CAAvD;AACA,QAAIK,MAAM,GAAGtB,WAAW,CAACuB,GAAZ,CAAgB,gBAAhB,CAAb;AACA,QAAIC,EAAE,GAAGC,IAAI,CAACC,GAAL,CAASL,QAAT,IAAqBC,MAA9B;AACA,QAAIK,EAAE,GAAGF,IAAI,CAACG,GAAL,CAASP,QAAT,IAAqBC,MAA9B;AACA,QAAIO,WAAW,GAAG3B,SAAS,CAACU,UAAV,CAAqB,QAArB,CAAlB;AACAiB,IAAAA,WAAW,IAAI9B,MAAM,CAAC+B,IAAP,CAAY,QAAZ,EAAsBD,WAAtB,CAAf;;AAEA,SAAKE,YAAL,CAAkB/B,WAAlB,EAA+BhB,IAA/B,EAAqCC,GAArC;;AAEAc,IAAAA,MAAM,CAACiC,WAAP,CAAmB,UAAnB,EAA+BnB,KAA/B,GAAuC7C,QAAQ,CAAC;AAC9C8C,MAAAA,CAAC,EAAER,MAAM,CAACQ,CAAP,IAAYV,aAAa,CAACmB,GAAd,CAAkB,OAAlB,IAA6BnB,aAAa,CAACmB,GAAd,CAAkB,WAAlB,KAAkC,CAA/D,GAAmE,CAA/E;AAD2C,KAAD,EAE5C1C,qBAAqB,CAACuB,aAAa,CAACC,QAAd,CAAuB,WAAvB,CAAD,EAAsCC,MAAtC,CAFuB,CAA/C;AAGApC,IAAAA,MAAM,CAAC6B,MAAM,CAACiC,WAAP,CAAmB,QAAnB,CAAD,EAA+B;AACnCC,MAAAA,CAAC,EAAET,EADgC;AAEnCU,MAAAA,CAAC,EAAEP,EAFgC;AAGnCd,MAAAA,KAAK,EAAEhC,qBAAqB,CAACqB,SAAS,CAACG,QAAV,CAAmB,CAAC,QAAD,EAAW,WAAX,CAAnB,CAAD,EAA8CC,MAA9C;AAHO,KAA/B,CAAN;AAKApC,IAAAA,MAAM,CAAC6B,MAAM,CAACiC,WAAP,CAAmB,MAAnB,CAAD,EAA6B;AACjCnB,MAAAA,KAAK,EAAEhC,qBAAqB,CAACqB,SAAS,CAACG,QAAV,CAAmB,CAAC,MAAD,EAAS,WAAT,CAAnB,CAAD,EAA4CC,MAA5C;AADK,KAA7B,CAAN;AAGA,QAAI6B,SAAS,GAAGpC,MAAM,CAACqC,gBAAP,EAAhB;AACA,QAAIC,SAAS,GAAGtC,MAAM,CAACuC,cAAP,EAAhB;AACAH,IAAAA,SAAS,IAAIjE,MAAM,CAACiE,SAAS,CAACH,WAAV,CAAsB,QAAtB,CAAD,EAAkC;AACnDC,MAAAA,CAAC,EAAET,EADgD;AAEnDU,MAAAA,CAAC,EAAEP;AAFgD,KAAlC,CAAnB,CA9E4E,CAiFxE;;AAEJzD,IAAAA,MAAM,CAACmE,SAAS,CAACL,WAAV,CAAsB,QAAtB,CAAD,EAAkC;AACtCC,MAAAA,CAAC,EAAET,EADmC;AAEtCU,MAAAA,CAAC,EAAEP;AAFmC,KAAlC,CAAN;AAIArD,IAAAA,mBAAmB,CAAC,IAAD,EAAO8B,aAAa,CAACmB,GAAd,CAAkB,OAAlB,CAAP,EAAmCnB,aAAa,CAACmB,GAAd,CAAkB,WAAlB,CAAnC,CAAnB;AACD,GAxFD;;AA0FAzC,EAAAA,QAAQ,CAACe,SAAT,CAAmBkC,YAAnB,GAAkC,UAAU/B,WAAV,EAAuBhB,IAAvB,EAA6BC,GAA7B,EAAkC;AAClE,QAAIsD,EAAJ;;AAEA,QAAIxC,MAAM,GAAG,IAAb;AACA,QAAIG,SAAS,GAAGlB,IAAI,CAACmB,YAAL,CAAkBlB,GAAlB,CAAhB;AACA,QAAIuD,cAAc,GAAGtC,SAAS,CAACG,QAAV,CAAmB,WAAnB,CAArB;AACA,QAAIoC,KAAK,GAAGzD,IAAI,CAACoC,aAAL,CAAmBnC,GAAnB,EAAwB,OAAxB,CAAZ;AACA,QAAIyD,WAAW,GAAGD,KAAK,IAAIA,KAAK,CAACE,IAAjC;AACA,QAAIC,aAAa,GAAGH,KAAK,IAAIA,KAAK,CAACI,OAAnC;AACAlE,IAAAA,aAAa,CAACoB,MAAD,EAASnB,oBAAoB,CAACsB,SAAD,CAA7B,EAA0C;AACrD4C,MAAAA,YAAY,EAAE9D,IAAI,CAACiB,SADkC;AAErD8C,MAAAA,cAAc,EAAE9D,GAFqC;AAGrD+D,MAAAA,YAAY,EAAEN,WAHuC;AAIrDO,MAAAA,cAAc,EAAEL,aAJqC;AAKrDM,MAAAA,WAAW,EAAElD,WAAW,CAACmD,iBAAZ,CAA8BlE,GAA9B,EAAmC,QAAnC,KAAgDD,IAAI,CAACoE,OAAL,CAAanE,GAAb;AALR,KAA1C,CAAb;AAOA,QAAIoD,SAAS,GAAGtC,MAAM,CAACuC,cAAP,EAAhB,CAhBkE,CAgBzB;;AAEzCvC,IAAAA,MAAM,CAACsD,aAAP,CAAqB;AACnB;AACAC,MAAAA,QAAQ,EAAE,IAFS;AAGnBC,MAAAA,QAAQ,EAAE;AAHS,KAArB,EAlBkE,CAsB9D;AACJ;;AAEAlB,IAAAA,SAAS,CAACP,IAAV,CAAe;AACbzC,MAAAA,EAAE,EAAE;AADS,KAAf;AAGA,QAAImE,aAAa,GAAGxD,WAAW,CAACuB,GAAZ,CAAgB,CAAC,OAAD,EAAU,UAAV,CAAhB,CAApB;;AAEA,QAAIiC,aAAa,KAAK,SAAlB,IAA+BA,aAAa,KAAK,OAArD,EAA8D;AAC5D,OAACjB,EAAE,GAAGxC,MAAM,CAACqC,gBAAP,EAAN,MAAqC,IAArC,IAA6CG,EAAE,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,EAAE,CAACkB,IAAH,EAAtE;AACA;AACD,KAjCiE,CAiChE;;;AAGFhF,IAAAA,iBAAiB,CAAC,IAAD,EAAOC,wBAAwB,CAACwB,SAAD,CAA/B,EAA4C;AAC3DwD,MAAAA,MAAM,EAAEhB,WADmD;AAE3DG,MAAAA,OAAO,EAAE1E,SAAS,CAACqE,cAAc,CAACjB,GAAf,CAAmB,CAAC,WAAD,EAAc,SAAd,CAAnB,CAAD,EAA+CqB,aAA/C,EAA8D,CAA9D;AAFyC,KAA5C,CAAjB;AAID,GAxCD;;AA0CA,SAAO9D,QAAP;AACD,CAxJD,CAwJEV,OAAO,CAACuF,MAxJV,CAFA,C,CA0JmB;;;AAGnB,IAAIC,OAAO;AACX;AACA,UAAU7E,MAAV,EAAkB;AAChBd,EAAAA,SAAS,CAAC2F,OAAD,EAAU7E,MAAV,CAAT;;AAEA,WAAS6E,OAAT,GAAmB;AACjB,QAAIzE,KAAK,GAAGJ,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAAC8E,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AAEA3E,IAAAA,KAAK,CAAC4E,qBAAN,GAA8B,IAA9B;AACA,WAAO5E,KAAP;AACD;;AAEDyE,EAAAA,OAAO,CAAC/D,SAAR,CAAkBmE,IAAlB,GAAyB,YAAY;AACnC,QAAIC,WAAW,GAAG,IAAI7F,OAAO,CAAC8F,KAAZ,EAAlB;AACA,SAAKC,YAAL,GAAoBF,WAApB;AACD,GAHD;;AAKAL,EAAAA,OAAO,CAAC/D,SAAR,CAAkBuE,MAAlB,GAA2B,UAAUpE,WAAV,EAAuBqE,OAAvB,EAAgCC,GAAhC,EAAqCC,OAArC,EAA8C;AACvE,QAAIvF,IAAI,GAAGgB,WAAW,CAACwE,OAAZ,EAAX;AACA,QAAIC,OAAO,GAAG,KAAKC,KAAnB;AACA,QAAIC,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAIzF,UAAJ,CAJuE,CAIvD;;AAEhB,QAAI,CAACuF,OAAD,IAAYzF,IAAI,CAAC4F,KAAL,KAAe,CAA/B,EAAkC;AAChC,UAAI/D,KAAK,GAAG7B,IAAI,CAACuB,aAAL,CAAmB,CAAnB,CAAZ;;AAEA,WAAK,IAAIsE,CAAC,GAAG,CAAb,EAAgBpE,KAAK,CAACI,KAAK,IAAIA,KAAK,CAAC3B,UAAhB,CAAL,IAAoC2F,CAAC,GAAG7F,IAAI,CAAC4F,KAAL,EAAxD,EAAsE,EAAEC,CAAxE,EAA2E;AACzEhE,QAAAA,KAAK,GAAG7B,IAAI,CAACuB,aAAL,CAAmBsE,CAAnB,CAAR;AACD;;AAED,UAAIhE,KAAJ,EAAW;AACT3B,QAAAA,UAAU,GAAG2B,KAAK,CAAC3B,UAAnB;AACD;AACF;;AAEDF,IAAAA,IAAI,CAAC8F,IAAL,CAAUL,OAAV,EAAmBM,GAAnB,CAAuB,UAAU9F,GAAV,EAAe;AACpC,UAAI+F,QAAQ,GAAG,IAAIlG,QAAJ,CAAaE,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,CAAf;AACAF,MAAAA,IAAI,CAACiG,gBAAL,CAAsBhG,GAAtB,EAA2B+F,QAA3B;AACAL,MAAAA,KAAK,CAACI,GAAN,CAAUC,QAAV;AACD,KAJD,EAIGE,MAJH,CAIU,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AAClC,UAAIJ,QAAQ,GAAGP,OAAO,CAACY,gBAAR,CAAyBD,MAAzB,CAAf;AACAJ,MAAAA,QAAQ,CAACpF,UAAT,CAAoBZ,IAApB,EAA0BmG,MAA1B,EAAkCjG,UAAlC;AACA8F,MAAAA,QAAQ,CAACM,GAAT,CAAa,OAAb;AACAX,MAAAA,KAAK,CAACI,GAAN,CAAUC,QAAV;AACAhG,MAAAA,IAAI,CAACiG,gBAAL,CAAsBE,MAAtB,EAA8BH,QAA9B;AACD,KAVD,EAUGO,MAVH,CAUU,UAAUtG,GAAV,EAAe;AACvB,UAAI+F,QAAQ,GAAGP,OAAO,CAACY,gBAAR,CAAyBpG,GAAzB,CAAf;AACAb,MAAAA,OAAO,CAACoH,wBAAR,CAAiCR,QAAjC,EAA2ChF,WAA3C,EAAwDf,GAAxD;AACD,KAbD,EAaGwG,OAbH;AAcAjH,IAAAA,WAAW,CAACwB,WAAD,CAAX,CAhCuE,CAgC7C;;AAE1B,QAAIA,WAAW,CAACuB,GAAZ,CAAgB,qBAAhB,MAA2C,WAA/C,EAA4D;AAC1D,WAAKmD,KAAL,GAAa1F,IAAb;AACD;AACF,GArCD;;AAuCA4E,EAAAA,OAAO,CAAC/D,SAAR,CAAkB6F,OAAlB,GAA4B,YAAY,CAAE,CAA1C;;AAEA9B,EAAAA,OAAO,CAAC/D,SAAR,CAAkB8F,YAAlB,GAAiC,UAAUC,KAAV,EAAiB5F,WAAjB,EAA8B;AAC7D,QAAIhB,IAAI,GAAGgB,WAAW,CAACwE,OAAZ,EAAX;AACA,QAAIqB,UAAU,GAAG7G,IAAI,CAACuB,aAAL,CAAmB,CAAnB,CAAjB;;AAEA,QAAIsF,UAAJ,EAAgB;AACd,UAAIrE,EAAE,GAAGoE,KAAK,CAAC,CAAD,CAAL,GAAWC,UAAU,CAACC,EAA/B;AACA,UAAInE,EAAE,GAAGiE,KAAK,CAAC,CAAD,CAAL,GAAWC,UAAU,CAACE,EAA/B;AACA,UAAIC,MAAM,GAAGvE,IAAI,CAACwE,IAAL,CAAUzE,EAAE,GAAGA,EAAL,GAAUG,EAAE,GAAGA,EAAzB,CAAb;AACA,aAAOqE,MAAM,IAAIH,UAAU,CAAC/E,CAArB,IAA0BkF,MAAM,IAAIH,UAAU,CAAC9E,EAAtD;AACD;AACF,GAVD;;AAYA6C,EAAAA,OAAO,CAACsC,IAAR,GAAe,KAAf;AACA,SAAOtC,OAAP;AACD,CAtED,CAsEErF,SAtEF,CAFA;;AA0EA,eAAeqF,OAAf","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __assign, __extends } from \"tslib\";\nimport { extend, retrieve3 } from 'zrender/lib/core/util';\nimport * as graphic from '../../util/graphic';\nimport { setStatesStylesFromModel, enableHoverEmphasis } from '../../util/states';\nimport ChartView from '../../view/Chart';\nimport labelLayout from './labelLayout';\nimport { setLabelLineStyle, getLabelLineStatesModels } from '../../label/labelGuideHelper';\nimport { setLabelStyle, getLabelStatesModels } from '../../label/labelStyle';\nimport { getSectorCornerRadius } from '../helper/pieHelper';\n/**\n * Piece of pie including Sector, Label, LabelLine\n */\n\nvar PiePiece =\n/** @class */\nfunction (_super) {\n  __extends(PiePiece, _super);\n\n  function PiePiece(data, idx, startAngle) {\n    var _this = _super.call(this) || this;\n\n    _this.z2 = 2;\n    var polyline = new graphic.Polyline();\n    var text = new graphic.Text();\n\n    _this.setTextGuideLine(polyline);\n\n    _this.setTextContent(text);\n\n    _this.updateData(data, idx, startAngle, true);\n\n    return _this;\n  }\n\n  PiePiece.prototype.updateData = function (data, idx, startAngle, firstCreate) {\n    var sector = this;\n    var seriesModel = data.hostModel;\n    var itemModel = data.getItemModel(idx);\n    var emphasisModel = itemModel.getModel('emphasis');\n    var layout = data.getItemLayout(idx);\n    var sectorShape = extend(getSectorCornerRadius(itemModel.getModel('itemStyle'), layout) || {}, layout); // Ignore NaN data.\n\n    if (isNaN(sectorShape.startAngle)) {\n      // Use NaN shape to avoid drawing shape.\n      sector.setShape(sectorShape);\n      return;\n    }\n\n    if (firstCreate) {\n      sector.setShape(sectorShape);\n      var animationType = seriesModel.getShallow('animationType');\n\n      if (animationType === 'scale') {\n        sector.shape.r = layout.r0;\n        graphic.initProps(sector, {\n          shape: {\n            r: layout.r\n          }\n        }, seriesModel, idx);\n      } // Expansion\n      else {\n          if (startAngle != null) {\n            sector.setShape({\n              startAngle: startAngle,\n              endAngle: startAngle\n            });\n            graphic.initProps(sector, {\n              shape: {\n                startAngle: layout.startAngle,\n                endAngle: layout.endAngle\n              }\n            }, seriesModel, idx);\n          } else {\n            sector.shape.endAngle = layout.startAngle;\n            graphic.updateProps(sector, {\n              shape: {\n                endAngle: layout.endAngle\n              }\n            }, seriesModel, idx);\n          }\n        }\n    } else {\n      // Transition animation from the old shape\n      graphic.updateProps(sector, {\n        shape: sectorShape\n      }, seriesModel, idx);\n    }\n\n    sector.useStyle(data.getItemVisual(idx, 'style'));\n    setStatesStylesFromModel(sector, itemModel);\n    var midAngle = (layout.startAngle + layout.endAngle) / 2;\n    var offset = seriesModel.get('selectedOffset');\n    var dx = Math.cos(midAngle) * offset;\n    var dy = Math.sin(midAngle) * offset;\n    var cursorStyle = itemModel.getShallow('cursor');\n    cursorStyle && sector.attr('cursor', cursorStyle);\n\n    this._updateLabel(seriesModel, data, idx);\n\n    sector.ensureState('emphasis').shape = __assign({\n      r: layout.r + (emphasisModel.get('scale') ? emphasisModel.get('scaleSize') || 0 : 0)\n    }, getSectorCornerRadius(emphasisModel.getModel('itemStyle'), layout));\n    extend(sector.ensureState('select'), {\n      x: dx,\n      y: dy,\n      shape: getSectorCornerRadius(itemModel.getModel(['select', 'itemStyle']), layout)\n    });\n    extend(sector.ensureState('blur'), {\n      shape: getSectorCornerRadius(itemModel.getModel(['blur', 'itemStyle']), layout)\n    });\n    var labelLine = sector.getTextGuideLine();\n    var labelText = sector.getTextContent();\n    labelLine && extend(labelLine.ensureState('select'), {\n      x: dx,\n      y: dy\n    }); // TODO: needs dx, dy in zrender?\n\n    extend(labelText.ensureState('select'), {\n      x: dx,\n      y: dy\n    });\n    enableHoverEmphasis(this, emphasisModel.get('focus'), emphasisModel.get('blurScope'));\n  };\n\n  PiePiece.prototype._updateLabel = function (seriesModel, data, idx) {\n    var _a;\n\n    var sector = this;\n    var itemModel = data.getItemModel(idx);\n    var labelLineModel = itemModel.getModel('labelLine');\n    var style = data.getItemVisual(idx, 'style');\n    var visualColor = style && style.fill;\n    var visualOpacity = style && style.opacity;\n    setLabelStyle(sector, getLabelStatesModels(itemModel), {\n      labelFetcher: data.hostModel,\n      labelDataIndex: idx,\n      inheritColor: visualColor,\n      defaultOpacity: visualOpacity,\n      defaultText: seriesModel.getFormattedLabel(idx, 'normal') || data.getName(idx)\n    });\n    var labelText = sector.getTextContent(); // Set textConfig on sector.\n\n    sector.setTextConfig({\n      // reset position, rotation\n      position: null,\n      rotation: null\n    }); // Make sure update style on labelText after setLabelStyle.\n    // Because setLabelStyle will replace a new style on it.\n\n    labelText.attr({\n      z2: 10\n    });\n    var labelPosition = seriesModel.get(['label', 'position']);\n\n    if (labelPosition !== 'outside' && labelPosition !== 'outer') {\n      (_a = sector.getTextGuideLine()) === null || _a === void 0 ? void 0 : _a.hide();\n      return;\n    } // Default use item visual color\n\n\n    setLabelLineStyle(this, getLabelLineStatesModels(itemModel), {\n      stroke: visualColor,\n      opacity: retrieve3(labelLineModel.get(['lineStyle', 'opacity']), visualOpacity, 1)\n    });\n  };\n\n  return PiePiece;\n}(graphic.Sector); // Pie view\n\n\nvar PieView =\n/** @class */\nfunction (_super) {\n  __extends(PieView, _super);\n\n  function PieView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ignoreLabelLineUpdate = true;\n    return _this;\n  }\n\n  PieView.prototype.init = function () {\n    var sectorGroup = new graphic.Group();\n    this._sectorGroup = sectorGroup;\n  };\n\n  PieView.prototype.render = function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var oldData = this._data;\n    var group = this.group;\n    var startAngle; // First render\n\n    if (!oldData && data.count() > 0) {\n      var shape = data.getItemLayout(0);\n\n      for (var s = 1; isNaN(shape && shape.startAngle) && s < data.count(); ++s) {\n        shape = data.getItemLayout(s);\n      }\n\n      if (shape) {\n        startAngle = shape.startAngle;\n      }\n    }\n\n    data.diff(oldData).add(function (idx) {\n      var piePiece = new PiePiece(data, idx, startAngle);\n      data.setItemGraphicEl(idx, piePiece);\n      group.add(piePiece);\n    }).update(function (newIdx, oldIdx) {\n      var piePiece = oldData.getItemGraphicEl(oldIdx);\n      piePiece.updateData(data, newIdx, startAngle);\n      piePiece.off('click');\n      group.add(piePiece);\n      data.setItemGraphicEl(newIdx, piePiece);\n    }).remove(function (idx) {\n      var piePiece = oldData.getItemGraphicEl(idx);\n      graphic.removeElementWithFadeOut(piePiece, seriesModel, idx);\n    }).execute();\n    labelLayout(seriesModel); // Always use initial animation.\n\n    if (seriesModel.get('animationTypeUpdate') !== 'expansion') {\n      this._data = data;\n    }\n  };\n\n  PieView.prototype.dispose = function () {};\n\n  PieView.prototype.containPoint = function (point, seriesModel) {\n    var data = seriesModel.getData();\n    var itemLayout = data.getItemLayout(0);\n\n    if (itemLayout) {\n      var dx = point[0] - itemLayout.cx;\n      var dy = point[1] - itemLayout.cy;\n      var radius = Math.sqrt(dx * dx + dy * dy);\n      return radius <= itemLayout.r && radius >= itemLayout.r0;\n    }\n  };\n\n  PieView.type = 'pie';\n  return PieView;\n}(ChartView);\n\nexport default PieView;"]},"metadata":{},"sourceType":"module"}