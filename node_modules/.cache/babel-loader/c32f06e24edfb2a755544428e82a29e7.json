{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport * as numberUtil from 'echarts/lib/util/number';\nimport LiquidShape from './liquidFillShape';\nconst parsePercent = numberUtil.parsePercent;\necharts.extendChartView({\n  type: 'liquidFill',\n  render: function (seriesModel, ecModel, api) {\n    var group = this.group;\n    group.removeAll();\n    var data = seriesModel.getData();\n    var itemModel = data.getItemModel(0);\n    var center = itemModel.get('center');\n    var radius = itemModel.get('radius');\n    var width = api.getWidth();\n    var height = api.getHeight();\n    var size = Math.min(width, height); // itemStyle\n\n    var outlineDistance = 0;\n    var outlineBorderWidth = 0;\n    var showOutline = seriesModel.get('outline.show');\n\n    if (showOutline) {\n      outlineDistance = seriesModel.get('outline.borderDistance');\n      outlineBorderWidth = parsePercent(seriesModel.get('outline.itemStyle.borderWidth'), size);\n    }\n\n    var cx = parsePercent(center[0], width);\n    var cy = parsePercent(center[1], height);\n    var outterRadius;\n    var innerRadius;\n    var paddingRadius;\n    var isFillContainer = false;\n    var symbol = seriesModel.get('shape');\n\n    if (symbol === 'container') {\n      // a shape that fully fills the container\n      isFillContainer = true;\n      outterRadius = [width / 2, height / 2];\n      innerRadius = [outterRadius[0] - outlineBorderWidth / 2, outterRadius[1] - outlineBorderWidth / 2];\n      paddingRadius = [parsePercent(outlineDistance, width), parsePercent(outlineDistance, height)];\n      radius = [Math.max(innerRadius[0] - paddingRadius[0], 0), Math.max(innerRadius[1] - paddingRadius[1], 0)];\n    } else {\n      outterRadius = parsePercent(radius, size) / 2;\n      innerRadius = outterRadius - outlineBorderWidth / 2;\n      paddingRadius = parsePercent(outlineDistance, size);\n      radius = Math.max(innerRadius - paddingRadius, 0);\n    }\n\n    if (showOutline) {\n      var outline = getOutline();\n      outline.style.lineWidth = outlineBorderWidth;\n      group.add(getOutline());\n    }\n\n    var left = isFillContainer ? 0 : cx - radius;\n    var top = isFillContainer ? 0 : cy - radius;\n    var wavePath = null;\n    group.add(getBackground()); // each data item for a wave\n\n    var oldData = this._data;\n    var waves = [];\n    data.diff(oldData).add(function (idx) {\n      var wave = getWave(idx, false);\n      var waterLevel = wave.shape.waterLevel;\n      wave.shape.waterLevel = isFillContainer ? height / 2 : radius;\n      echarts.graphic.initProps(wave, {\n        shape: {\n          waterLevel: waterLevel\n        }\n      }, seriesModel);\n      wave.z2 = 2;\n      setWaveAnimation(idx, wave, null);\n      group.add(wave);\n      data.setItemGraphicEl(idx, wave);\n      waves.push(wave);\n    }).update(function (newIdx, oldIdx) {\n      var waveElement = oldData.getItemGraphicEl(oldIdx); // new wave is used to calculate position, but not added\n\n      var newWave = getWave(newIdx, false, waveElement); // changes with animation\n\n      var shape = {};\n      var shapeAttrs = ['amplitude', 'cx', 'cy', 'phase', 'radius', 'radiusY', 'waterLevel', 'waveLength'];\n\n      for (var i = 0; i < shapeAttrs.length; ++i) {\n        var attr = shapeAttrs[i];\n\n        if (newWave.shape.hasOwnProperty(attr)) {\n          shape[attr] = newWave.shape[attr];\n        }\n      }\n\n      var style = {};\n      var styleAttrs = ['fill', 'opacity', 'shadowBlur', 'shadowColor'];\n\n      for (var i = 0; i < styleAttrs.length; ++i) {\n        var attr = styleAttrs[i];\n\n        if (newWave.style.hasOwnProperty(attr)) {\n          style[attr] = newWave.style[attr];\n        }\n      }\n\n      if (isFillContainer) {\n        shape.radiusY = height / 2;\n      } // changes with animation\n\n\n      echarts.graphic.updateProps(waveElement, {\n        shape: shape\n      }, seriesModel);\n      waveElement.useStyle(style); // instant changes\n\n      waveElement.position = newWave.position;\n      waveElement.setClipPath(newWave.getClipPath());\n      waveElement.shape.inverse = newWave.inverse;\n      setWaveAnimation(newIdx, waveElement, waveElement);\n      group.add(waveElement);\n      data.setItemGraphicEl(newIdx, waveElement);\n      waves.push(waveElement);\n    }).remove(function (idx) {\n      var wave = oldData.getItemGraphicEl(idx);\n      group.remove(wave);\n    }).execute();\n\n    if (itemModel.get('label.show')) {\n      group.add(getText(waves));\n    }\n\n    this._data = data;\n    /**\n     * Get path for outline, background and clipping\n     *\n     * @param {number} r outter radius of shape\n     * @param {boolean|undefined} isForClipping if the shape is used\n     *                                          for clipping\n     */\n\n    function getPath(r, isForClipping) {\n      if (symbol) {\n        // customed symbol path\n        if (symbol.indexOf('path://') === 0) {\n          var path = echarts.graphic.makePath(symbol.slice(7), {});\n          var bouding = path.getBoundingRect();\n          var w = bouding.width;\n          var h = bouding.height;\n\n          if (w > h) {\n            h = r * 2 / w * h;\n            w = r * 2;\n          } else {\n            w = r * 2 / h * w;\n            h = r * 2;\n          }\n\n          var left = isForClipping ? 0 : cx - w / 2;\n          var top = isForClipping ? 0 : cy - h / 2;\n          path = echarts.graphic.makePath(symbol.slice(7), {}, new echarts.graphic.BoundingRect(left, top, w, h));\n\n          if (isForClipping) {\n            path.position = [-w / 2, -h / 2];\n          }\n\n          return path;\n        } else if (isFillContainer) {\n          // fully fill the container\n          var x = isForClipping ? -r[0] : cx - r[0];\n          var y = isForClipping ? -r[1] : cy - r[1];\n          return echarts.helper.createSymbol('rect', x, y, r[0] * 2, r[1] * 2);\n        } else {\n          var x = isForClipping ? -r : cx - r;\n          var y = isForClipping ? -r : cy - r;\n\n          if (symbol === 'pin') {\n            y += r;\n          } else if (symbol === 'arrow') {\n            y -= r;\n          }\n\n          return echarts.helper.createSymbol(symbol, x, y, r * 2, r * 2);\n        }\n      }\n\n      return new echarts.graphic.Circle({\n        shape: {\n          cx: isForClipping ? 0 : cx,\n          cy: isForClipping ? 0 : cy,\n          r: r\n        }\n      });\n    }\n    /**\n     * Create outline\n     */\n\n\n    function getOutline() {\n      var outlinePath = getPath(outterRadius);\n      outlinePath.style.fill = null;\n      outlinePath.setStyle(seriesModel.getModel('outline.itemStyle').getItemStyle());\n      return outlinePath;\n    }\n    /**\n     * Create background\n     */\n\n\n    function getBackground() {\n      // Seperate stroke and fill, so we can use stroke to cover the alias of clipping.\n      var strokePath = getPath(radius);\n      strokePath.setStyle(seriesModel.getModel('backgroundStyle').getItemStyle());\n      strokePath.style.fill = null; // Stroke is front of wave\n\n      strokePath.z2 = 5;\n      var fillPath = getPath(radius);\n      fillPath.setStyle(seriesModel.getModel('backgroundStyle').getItemStyle());\n      fillPath.style.stroke = null;\n      var group = new echarts.graphic.Group();\n      group.add(strokePath);\n      group.add(fillPath);\n      return group;\n    }\n    /**\n     * wave shape\n     */\n\n\n    function getWave(idx, isInverse, oldWave) {\n      var radiusX = isFillContainer ? radius[0] : radius;\n      var radiusY = isFillContainer ? height / 2 : radius;\n      var itemModel = data.getItemModel(idx);\n      var itemStyleModel = itemModel.getModel('itemStyle');\n      var phase = itemModel.get('phase');\n      var amplitude = parsePercent(itemModel.get('amplitude'), radiusY * 2);\n      var waveLength = parsePercent(itemModel.get('waveLength'), radiusX * 2);\n      var value = data.get('value', idx);\n      var waterLevel = radiusY - value * radiusY * 2;\n      phase = oldWave ? oldWave.shape.phase : phase === 'auto' ? idx * Math.PI / 4 : phase;\n      var normalStyle = itemStyleModel.getItemStyle();\n\n      if (!normalStyle.fill) {\n        var seriesColor = seriesModel.get('color');\n        var id = idx % seriesColor.length;\n        normalStyle.fill = seriesColor[id];\n      }\n\n      var x = radiusX * 2;\n      var wave = new LiquidShape({\n        shape: {\n          waveLength: waveLength,\n          radius: radiusX,\n          radiusY: radiusY,\n          cx: x,\n          cy: 0,\n          waterLevel: waterLevel,\n          amplitude: amplitude,\n          phase: phase,\n          inverse: isInverse\n        },\n        style: normalStyle,\n        position: [cx, cy]\n      });\n      wave.shape._waterLevel = waterLevel;\n      var hoverStyle = itemModel.getModel('emphasis.itemStyle').getItemStyle();\n      hoverStyle.lineWidth = 0;\n      wave.ensureState('emphasis').style = hoverStyle;\n      echarts.helper.enableHoverEmphasis(wave); // clip out the part outside the circle\n\n      var clip = getPath(radius, true); // set fill for clipPath, otherwise it will not trigger hover event\n\n      clip.setStyle({\n        fill: 'white'\n      });\n      wave.setClipPath(clip);\n      return wave;\n    }\n\n    function setWaveAnimation(idx, wave, oldWave) {\n      var itemModel = data.getItemModel(idx);\n      var maxSpeed = itemModel.get('period');\n      var direction = itemModel.get('direction');\n      var value = data.get('value', idx);\n      var phase = itemModel.get('phase');\n      phase = oldWave ? oldWave.shape.phase : phase === 'auto' ? idx * Math.PI / 4 : phase;\n\n      var defaultSpeed = function (maxSpeed) {\n        var cnt = data.count();\n        return cnt === 0 ? maxSpeed : maxSpeed * (0.2 + (cnt - idx) / cnt * 0.8);\n      };\n\n      var speed = 0;\n\n      if (maxSpeed === 'auto') {\n        speed = defaultSpeed(5000);\n      } else {\n        speed = typeof maxSpeed === 'function' ? maxSpeed(value, idx) : maxSpeed;\n      } // phase for moving left/right\n\n\n      var phaseOffset = 0;\n\n      if (direction === 'right' || direction == null) {\n        phaseOffset = Math.PI;\n      } else if (direction === 'left') {\n        phaseOffset = -Math.PI;\n      } else if (direction === 'none') {\n        phaseOffset = 0;\n      } else {\n        console.error('Illegal direction value for liquid fill.');\n      } // wave animation of moving left/right\n\n\n      if (direction !== 'none' && itemModel.get('waveAnimation')) {\n        wave.animate('shape', true).when(0, {\n          phase: phase\n        }).when(speed / 2, {\n          phase: phaseOffset + phase\n        }).when(speed, {\n          phase: phaseOffset * 2 + phase\n        }).during(function () {\n          if (wavePath) {\n            wavePath.dirty(true);\n          }\n        }).start();\n      }\n    }\n    /**\n     * text on wave\n     */\n\n\n    function getText(waves) {\n      var labelModel = itemModel.getModel('label');\n\n      function formatLabel() {\n        var formatted = seriesModel.getFormattedLabel(0, 'normal');\n        var defaultVal = data.get('value', 0) * 100;\n        var defaultLabel = data.getName(0) || seriesModel.name;\n\n        if (!isNaN(defaultVal)) {\n          defaultLabel = defaultVal.toFixed(0) + '%';\n        }\n\n        return formatted == null ? defaultLabel : formatted;\n      }\n\n      var textRectOption = {\n        z2: 10,\n        shape: {\n          x: left,\n          y: top,\n          width: (isFillContainer ? radius[0] : radius) * 2,\n          height: (isFillContainer ? radius[1] : radius) * 2\n        },\n        style: {\n          fill: 'transparent'\n        },\n        textConfig: {\n          position: labelModel.get('position') || 'inside'\n        },\n        silent: true\n      };\n      var textOption = {\n        style: {\n          text: formatLabel(),\n          textAlign: labelModel.get('align'),\n          textVerticalAlign: labelModel.get('baseline')\n        }\n      };\n      Object.assign(textOption.style, echarts.helper.createTextStyle(labelModel));\n      var outsideTextRect = new echarts.graphic.Rect(textRectOption);\n      var insideTextRect = new echarts.graphic.Rect(textRectOption);\n      insideTextRect.disableLabelAnimation = true;\n      outsideTextRect.disableLabelAnimation = true;\n      var outsideText = new echarts.graphic.Text(textOption);\n      var insideText = new echarts.graphic.Text(textOption);\n      outsideTextRect.setTextContent(outsideText);\n      insideTextRect.setTextContent(insideText);\n      var insColor = labelModel.get('insideColor');\n      insideText.style.fill = insColor;\n      var group = new echarts.graphic.Group();\n      group.add(outsideTextRect);\n      group.add(insideTextRect); // clip out waves for insideText\n\n      var boundingCircle = getPath(radius, true);\n      wavePath = new echarts.graphic.CompoundPath({\n        shape: {\n          paths: waves\n        },\n        position: [cx, cy]\n      });\n      wavePath.setClipPath(boundingCircle);\n      insideTextRect.setClipPath(wavePath);\n      return group;\n    }\n  },\n  dispose: function () {// dispose nothing here\n  }\n});","map":{"version":3,"sources":["D:/WebStorm Project/flowingcloud/node_modules/echarts-liquidfill/src/liquidFillView.js"],"names":["echarts","numberUtil","LiquidShape","parsePercent","extendChartView","type","render","seriesModel","ecModel","api","group","removeAll","data","getData","itemModel","getItemModel","center","get","radius","width","getWidth","height","getHeight","size","Math","min","outlineDistance","outlineBorderWidth","showOutline","cx","cy","outterRadius","innerRadius","paddingRadius","isFillContainer","symbol","max","outline","getOutline","style","lineWidth","add","left","top","wavePath","getBackground","oldData","_data","waves","diff","idx","wave","getWave","waterLevel","shape","graphic","initProps","z2","setWaveAnimation","setItemGraphicEl","push","update","newIdx","oldIdx","waveElement","getItemGraphicEl","newWave","shapeAttrs","i","length","attr","hasOwnProperty","styleAttrs","radiusY","updateProps","useStyle","position","setClipPath","getClipPath","inverse","remove","execute","getText","getPath","r","isForClipping","indexOf","path","makePath","slice","bouding","getBoundingRect","w","h","BoundingRect","x","y","helper","createSymbol","Circle","outlinePath","fill","setStyle","getModel","getItemStyle","strokePath","fillPath","stroke","Group","isInverse","oldWave","radiusX","itemStyleModel","phase","amplitude","waveLength","value","PI","normalStyle","seriesColor","id","_waterLevel","hoverStyle","ensureState","enableHoverEmphasis","clip","maxSpeed","direction","defaultSpeed","cnt","count","speed","phaseOffset","console","error","animate","when","during","dirty","start","labelModel","formatLabel","formatted","getFormattedLabel","defaultVal","defaultLabel","getName","name","isNaN","toFixed","textRectOption","textConfig","silent","textOption","text","textAlign","textVerticalAlign","Object","assign","createTextStyle","outsideTextRect","Rect","insideTextRect","disableLabelAnimation","outsideText","Text","insideText","setTextContent","insColor","boundingCircle","CompoundPath","paths","dispose"],"mappings":"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","sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport * as numberUtil from 'echarts/lib/util/number';\nimport LiquidShape from './liquidFillShape';\n\nconst parsePercent = numberUtil.parsePercent;\n\necharts.extendChartView({\n\n    type: 'liquidFill',\n\n    render: function (seriesModel, ecModel, api) {\n        var group = this.group;\n        group.removeAll();\n\n        var data = seriesModel.getData();\n\n        var itemModel = data.getItemModel(0);\n\n        var center = itemModel.get('center');\n        var radius = itemModel.get('radius');\n\n        var width = api.getWidth();\n        var height = api.getHeight();\n        var size = Math.min(width, height);\n        // itemStyle\n        var outlineDistance = 0;\n        var outlineBorderWidth = 0;\n        var showOutline = seriesModel.get('outline.show');\n\n        if (showOutline) {\n            outlineDistance = seriesModel.get('outline.borderDistance');\n            outlineBorderWidth = parsePercent(\n                seriesModel.get('outline.itemStyle.borderWidth'), size\n            );\n        }\n\n        var cx = parsePercent(center[0], width);\n        var cy = parsePercent(center[1], height);\n\n        var outterRadius;\n        var innerRadius;\n        var paddingRadius;\n\n        var isFillContainer = false;\n\n        var symbol = seriesModel.get('shape');\n        if (symbol === 'container') {\n            // a shape that fully fills the container\n            isFillContainer = true;\n\n            outterRadius = [\n                width / 2,\n                height / 2\n            ];\n            innerRadius = [\n                outterRadius[0] - outlineBorderWidth / 2,\n                outterRadius[1] - outlineBorderWidth / 2\n            ];\n            paddingRadius = [\n                parsePercent(outlineDistance, width),\n                parsePercent(outlineDistance, height)\n            ];\n\n            radius = [\n                Math.max(innerRadius[0] - paddingRadius[0], 0),\n                Math.max(innerRadius[1] - paddingRadius[1], 0)\n            ];\n        }\n        else {\n            outterRadius = parsePercent(radius, size) / 2;\n            innerRadius = outterRadius - outlineBorderWidth / 2;\n            paddingRadius = parsePercent(outlineDistance, size);\n\n            radius = Math.max(innerRadius - paddingRadius, 0);\n        }\n\n        if (showOutline) {\n            var outline = getOutline();\n            outline.style.lineWidth = outlineBorderWidth;\n            group.add(getOutline());\n        }\n\n        var left = isFillContainer ? 0 : cx - radius;\n        var top = isFillContainer ? 0 : cy - radius;\n\n        var wavePath = null;\n\n        group.add(getBackground());\n\n        // each data item for a wave\n        var oldData = this._data;\n        var waves = [];\n        data.diff(oldData)\n            .add(function (idx) {\n                var wave = getWave(idx, false);\n\n                var waterLevel = wave.shape.waterLevel;\n                wave.shape.waterLevel = isFillContainer ? height / 2 : radius;\n                echarts.graphic.initProps(wave, {\n                    shape: {\n                        waterLevel: waterLevel\n                    }\n                }, seriesModel);\n\n                wave.z2 = 2;\n                setWaveAnimation(idx, wave, null);\n\n                group.add(wave);\n                data.setItemGraphicEl(idx, wave);\n                waves.push(wave);\n            })\n            .update(function (newIdx, oldIdx) {\n                var waveElement = oldData.getItemGraphicEl(oldIdx);\n\n                // new wave is used to calculate position, but not added\n                var newWave = getWave(newIdx, false, waveElement);\n\n                // changes with animation\n                var shape = {};\n                var shapeAttrs = ['amplitude', 'cx', 'cy', 'phase', 'radius', 'radiusY', 'waterLevel', 'waveLength'];\n                for (var i = 0; i < shapeAttrs.length; ++i) {\n                    var attr = shapeAttrs[i];\n                    if (newWave.shape.hasOwnProperty(attr)) {\n                        shape[attr] = newWave.shape[attr];\n                    }\n                }\n\n                var style = {};\n                var styleAttrs = ['fill', 'opacity', 'shadowBlur', 'shadowColor'];\n                for (var i = 0; i < styleAttrs.length; ++i) {\n                    var attr = styleAttrs[i];\n                    if (newWave.style.hasOwnProperty(attr)) {\n                        style[attr] = newWave.style[attr];\n                    }\n                }\n\n                if (isFillContainer) {\n                    shape.radiusY = height / 2;\n                }\n\n                // changes with animation\n                echarts.graphic.updateProps(waveElement, {\n                    shape: shape\n                }, seriesModel);\n\n                waveElement.useStyle(style);\n\n                // instant changes\n                waveElement.position = newWave.position;\n                waveElement.setClipPath(newWave.getClipPath());\n                waveElement.shape.inverse = newWave.inverse;\n\n                setWaveAnimation(newIdx, waveElement, waveElement);\n                group.add(waveElement);\n                data.setItemGraphicEl(newIdx, waveElement);\n                waves.push(waveElement);\n            })\n            .remove(function (idx) {\n                var wave = oldData.getItemGraphicEl(idx);\n                group.remove(wave);\n            })\n            .execute();\n\n        if (itemModel.get('label.show')) {\n            group.add(getText(waves));\n        }\n\n        this._data = data;\n\n        /**\n         * Get path for outline, background and clipping\n         *\n         * @param {number} r outter radius of shape\n         * @param {boolean|undefined} isForClipping if the shape is used\n         *                                          for clipping\n         */\n        function getPath(r, isForClipping) {\n            if (symbol) {\n                // customed symbol path\n                if (symbol.indexOf('path://') === 0) {\n                    var path = echarts.graphic.makePath(symbol.slice(7), {});\n                    var bouding = path.getBoundingRect();\n                    var w = bouding.width;\n                    var h = bouding.height;\n                    if (w > h) {\n                        h = r * 2 / w * h;\n                        w = r * 2;\n                    }\n                    else {\n                        w = r * 2 / h * w;\n                        h = r * 2;\n                    }\n\n                    var left = isForClipping ? 0 : cx - w / 2;\n                    var top = isForClipping ? 0 : cy - h / 2;\n                    path = echarts.graphic.makePath(\n                        symbol.slice(7),\n                        {},\n                        new echarts.graphic.BoundingRect(left, top, w, h)\n                    );\n                    if (isForClipping) {\n                        path.position = [-w / 2, -h / 2];\n                    }\n                    return path;\n                }\n                else if (isFillContainer) {\n                    // fully fill the container\n                    var x = isForClipping ? -r[0] : cx - r[0];\n                    var y = isForClipping ? -r[1] : cy - r[1];\n                    return echarts.helper.createSymbol(\n                        'rect', x, y, r[0] * 2, r[1] * 2\n                    );\n                }\n                else {\n                    var x = isForClipping ? -r : cx - r;\n                    var y = isForClipping ? -r : cy - r;\n                    if (symbol === 'pin') {\n                        y += r;\n                    }\n                    else if (symbol === 'arrow') {\n                        y -= r;\n                    }\n                    return echarts.helper.createSymbol(symbol, x, y, r * 2, r * 2);\n                }\n            }\n\n            return new echarts.graphic.Circle({\n                shape: {\n                    cx: isForClipping ? 0 : cx,\n                    cy: isForClipping ? 0 : cy,\n                    r: r\n                }\n            });\n        }\n        /**\n         * Create outline\n         */\n        function getOutline() {\n            var outlinePath = getPath(outterRadius);\n            outlinePath.style.fill = null;\n\n            outlinePath.setStyle(seriesModel.getModel('outline.itemStyle')\n                .getItemStyle());\n\n            return outlinePath;\n        }\n\n        /**\n         * Create background\n         */\n        function getBackground() {\n            // Seperate stroke and fill, so we can use stroke to cover the alias of clipping.\n            var strokePath = getPath(radius);\n            strokePath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            strokePath.style.fill = null;\n\n            // Stroke is front of wave\n            strokePath.z2 = 5;\n\n            var fillPath = getPath(radius);\n            fillPath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            fillPath.style.stroke = null;\n\n            var group = new echarts.graphic.Group();\n            group.add(strokePath);\n            group.add(fillPath);\n\n            return group;\n        }\n\n        /**\n         * wave shape\n         */\n        function getWave(idx, isInverse, oldWave) {\n            var radiusX = isFillContainer ? radius[0] : radius;\n            var radiusY = isFillContainer ? height / 2 : radius;\n\n            var itemModel = data.getItemModel(idx);\n            var itemStyleModel = itemModel.getModel('itemStyle');\n            var phase = itemModel.get('phase');\n            var amplitude = parsePercent(itemModel.get('amplitude'),\n                radiusY * 2);\n            var waveLength = parsePercent(itemModel.get('waveLength'),\n                radiusX * 2);\n\n            var value = data.get('value', idx);\n            var waterLevel = radiusY - value * radiusY * 2;\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n            var normalStyle = itemStyleModel.getItemStyle();\n            if (!normalStyle.fill) {\n                var seriesColor = seriesModel.get('color');\n                var id = idx % seriesColor.length;\n                normalStyle.fill = seriesColor[id];\n            }\n\n            var x = radiusX * 2;\n            var wave = new LiquidShape({\n                shape: {\n                    waveLength: waveLength,\n                    radius: radiusX,\n                    radiusY: radiusY,\n                    cx: x,\n                    cy: 0,\n                    waterLevel: waterLevel,\n                    amplitude: amplitude,\n                    phase: phase,\n                    inverse: isInverse\n                },\n                style: normalStyle,\n                position: [cx, cy]\n            });\n            wave.shape._waterLevel = waterLevel;\n\n            var hoverStyle = itemModel.getModel('emphasis.itemStyle')\n                .getItemStyle();\n            hoverStyle.lineWidth = 0;\n\n            wave.ensureState('emphasis').style = hoverStyle;\n            echarts.helper.enableHoverEmphasis(wave);\n\n            // clip out the part outside the circle\n            var clip = getPath(radius, true);\n            // set fill for clipPath, otherwise it will not trigger hover event\n            clip.setStyle({\n                fill: 'white'\n            });\n            wave.setClipPath(clip);\n\n            return wave;\n        }\n\n        function setWaveAnimation(idx, wave, oldWave) {\n            var itemModel = data.getItemModel(idx);\n\n            var maxSpeed = itemModel.get('period');\n            var direction = itemModel.get('direction');\n\n            var value = data.get('value', idx);\n\n            var phase = itemModel.get('phase');\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n\n            var defaultSpeed = function (maxSpeed) {\n                var cnt = data.count();\n                return cnt === 0 ? maxSpeed : maxSpeed *\n                    (0.2 + (cnt - idx) / cnt * 0.8);\n            };\n            var speed = 0;\n            if (maxSpeed === 'auto') {\n                speed = defaultSpeed(5000);\n            }\n            else {\n                speed = typeof maxSpeed === 'function'\n                    ? maxSpeed(value, idx) : maxSpeed;\n            }\n\n            // phase for moving left/right\n            var phaseOffset = 0;\n            if (direction === 'right' || direction == null) {\n                phaseOffset = Math.PI;\n            }\n            else if (direction === 'left') {\n                phaseOffset = -Math.PI;\n            }\n            else if (direction === 'none') {\n                phaseOffset = 0;\n            }\n            else {\n                console.error('Illegal direction value for liquid fill.');\n            }\n\n            // wave animation of moving left/right\n            if (direction !== 'none' && itemModel.get('waveAnimation')) {\n                wave\n                    .animate('shape', true)\n                    .when(0, {\n                        phase: phase\n                    })\n                    .when(speed / 2, {\n                        phase: phaseOffset + phase\n                    })\n                    .when(speed, {\n                        phase: phaseOffset * 2 + phase\n                    })\n                    .during(function () {\n                        if (wavePath) {\n                            wavePath.dirty(true);\n                        }\n                    })\n                    .start();\n            }\n        }\n\n        /**\n         * text on wave\n         */\n        function getText(waves) {\n            var labelModel = itemModel.getModel('label');\n\n            function formatLabel() {\n                var formatted = seriesModel.getFormattedLabel(0, 'normal');\n                var defaultVal = (data.get('value', 0) * 100);\n                var defaultLabel = data.getName(0) || seriesModel.name;\n                if (!isNaN(defaultVal)) {\n                    defaultLabel = defaultVal.toFixed(0) + '%';\n                }\n                return formatted == null ? defaultLabel : formatted;\n            }\n\n            var textRectOption = {\n                z2: 10,\n                shape: {\n                    x: left,\n                    y: top,\n                    width: (isFillContainer ? radius[0] : radius) * 2,\n                    height: (isFillContainer ? radius[1] : radius) * 2\n                },\n                style: {\n                    fill: 'transparent'\n                },\n                textConfig: {\n                    position: labelModel.get('position') || 'inside'\n                },\n                silent: true\n            };\n            var textOption = {\n                style: {\n                    text: formatLabel(),\n                    textAlign: labelModel.get('align'),\n                    textVerticalAlign: labelModel.get('baseline')\n                }\n            };\n            Object.assign(textOption.style, echarts.helper.createTextStyle(labelModel));\n\n            var outsideTextRect = new echarts.graphic.Rect(textRectOption);\n            var insideTextRect = new echarts.graphic.Rect(textRectOption);\n            insideTextRect.disableLabelAnimation = true;\n            outsideTextRect.disableLabelAnimation = true;\n\n            var outsideText = new echarts.graphic.Text(textOption);\n            var insideText = new echarts.graphic.Text(textOption);\n            outsideTextRect.setTextContent(outsideText);\n\n            insideTextRect.setTextContent(insideText);\n            var insColor = labelModel.get('insideColor');\n            insideText.style.fill = insColor;\n\n            var group = new echarts.graphic.Group();\n            group.add(outsideTextRect);\n            group.add(insideTextRect);\n\n            // clip out waves for insideText\n            var boundingCircle = getPath(radius, true);\n\n            wavePath = new echarts.graphic.CompoundPath({\n                shape: {\n                    paths: waves\n                },\n                position: [cx, cy]\n            });\n\n            wavePath.setClipPath(boundingCircle);\n            insideTextRect.setClipPath(wavePath);\n\n            return group;\n        }\n    },\n\n    dispose: function () {\n        // dispose nothing here\n    }\n});\n"]},"metadata":{},"sourceType":"module"}