{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebStorm Project\\\\flowingcloud\\\\src\\\\components\\\\View\\\\Territory\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport * as echarts from 'echarts/core';\nimport 'echarts/map/js/china';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Territory extends Component {\n  componentDidMount() {\n    const outname = ['北京', '上海', '四川', '广东', '陕西', '浙江', '香港'];\n    const outvalue = [2210, 1210, 2650, 2100, 890, 1063, 408];\n    const outdata = [];\n    let max = 6000,\n        min = 10;\n    let maxSize4Pin = 100,\n        minSize4Pin = 20;\n\n    for (let i = 0; i < outname.length; i++) {\n      outdata.push({\n        name: outname[i],\n        value: outvalue[i]\n      });\n    }\n\n    const geoCoordMap = {};\n    /*获取地图数据*/\n\n    const mapFeatures = echarts.getMap('china').geoJson.features;\n    mapFeatures.forEach(function (v) {\n      console.log(v); // 地区名称\n\n      const name = v.properties.name; // 地区经纬度\n\n      geoCoordMap[name] = v.properties.cp;\n    });\n    console.log(geoCoordMap);\n\n    const convertData = function (outdata) {\n      const res = [];\n\n      for (let i = 0; i < outdata.length; i++) {\n        const geoCoord = geoCoordMap[outdata[i].name]; //第1个：{''}\n\n        console.log(geoCoord.concat(outdata[i].value));\n\n        if (geoCoord) {\n          res.push({\n            name: outdata[i].name,\n            //省份名称\n            value: geoCoord.concat(outdata[i].value)\n          });\n        }\n      }\n\n      return res;\n    };\n\n    const option = {\n      title: {\n        text: '企业成员热力分布图',\n        left: 'center',\n        top: 15,\n        textStyle: {\n          color: 'white'\n        }\n      },\n      // tooltip: {\n      //     show: true,\n      //     formatter: function (params) {\n      //         console.log(params);\n      //         if (params.value.length >= 1) {\n      //             return '&nbsp;&nbsp;' + params.name + '&nbsp;&nbsp;&nbsp;' + params.value[2] + '人&nbsp;&nbsp;';\n      //         } else {\n      //             return '&nbsp;&nbsp;' + params.name + '&nbsp;&nbsp;&nbsp;' + params.value + '人&nbsp;&nbsp;';\n      //         }\n      //     },\n      // },\n      geo: {\n        map: 'china',\n        show: true,\n        roam: false,\n        // label: {\n        //     emphasis: {\n        //         show: false\n        //     }\n        // },\n        layoutSize: \"110%\",\n        itemStyle: {\n          borderColor: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: '#00F6FF'\n          }, {\n            offset: 1,\n            color: '#53D9FF'\n          }], false),\n          borderWidth: 3,\n          shadowColor: 'rgba(10,76,139,1)',\n          shadowOffsetY: 0,\n          shadowBlur: 60\n        }\n      },\n      series: [{\n        type: 'map',\n        map: 'china',\n        aspectScale: 0.75,\n        label: {\n          normal: {\n            show: false\n          },\n          emphasis: {\n            show: false\n          }\n        },\n        itemStyle: {\n          normal: {\n            areaColor: {\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [{\n                offset: 0,\n                color: '#073684' // 0% 处的颜色\n\n              }, {\n                offset: 1,\n                color: '#061E3D' // 100% 处的颜色\n\n              }]\n            },\n            borderColor: '#215495',\n            borderWidth: 1\n          },\n          emphasis: {\n            areaColor: {\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [{\n                offset: 0,\n                color: '#073684' // 0% 处的颜色\n\n              }, {\n                offset: 1,\n                color: '#061E3D' // 100% 处的颜色\n\n              }]\n            }\n          }\n        },\n        data: outdata\n      }, {\n        type: 'effectScatter',\n        coordinateSystem: 'geo',\n        rippleEffect: {\n          brushType: 'stroke'\n        },\n        showEffectOn: 'render',\n        itemStyle: {\n          normal: {\n            color: {\n              type: 'radial',\n              x: 0.5,\n              y: 0.5,\n              r: 0.5,\n              colorStops: [{\n                offset: 0,\n                color: 'rgba(5,80,151,0.2)'\n              }, {\n                offset: 0.8,\n                color: 'rgba(5,80,151,0.8)'\n              }, {\n                offset: 1,\n                color: 'rgba(0,108,255,0.7)'\n              }],\n              global: false // 缺省为 false\n\n            }\n          }\n        },\n        label: {\n          normal: {\n            show: true,\n            color: '#fff',\n            fontWeight: 'bold',\n            position: 'inside',\n            formatter: function (para) {\n              return '{cnNum|' + para.data.value[2] + '}';\n            },\n            rich: {\n              cnNum: {\n                fontSize: 13,\n                color: '#D4EEFF'\n              }\n            }\n          }\n        },\n        symbol: 'circle',\n        symbolSize: function (val) {\n          if (val[2] === 0) {\n            return 0;\n          }\n\n          const a = (maxSize4Pin - minSize4Pin) / (max - min);\n          const b = maxSize4Pin - a * max;\n          return a * val[2] + b * 1.2;\n        },\n        data: convertData(outdata),\n        zlevel: 1\n      }]\n    };\n    echarts.init(this.container).setOption(option);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: element => {\n        this.container = element;\n      },\n      style: {\n        width: '870px',\n        height: '628px',\n        position: 'absolute',\n        top: '184px',\n        left: '656px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Territory;","map":{"version":3,"sources":["D:/WebStorm Project/flowingcloud/src/components/View/Territory/index.jsx"],"names":["React","Component","echarts","Territory","componentDidMount","outname","outvalue","outdata","max","min","maxSize4Pin","minSize4Pin","i","length","push","name","value","geoCoordMap","mapFeatures","getMap","geoJson","features","forEach","v","console","log","properties","cp","convertData","res","geoCoord","concat","option","title","text","left","top","textStyle","color","geo","map","show","roam","layoutSize","itemStyle","borderColor","graphic","LinearGradient","offset","borderWidth","shadowColor","shadowOffsetY","shadowBlur","series","type","aspectScale","label","normal","emphasis","areaColor","x","y","x2","y2","colorStops","data","coordinateSystem","rippleEffect","brushType","showEffectOn","r","global","fontWeight","position","formatter","para","rich","cnNum","fontSize","symbol","symbolSize","val","a","b","zlevel","init","container","setOption","render","element","width","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport * as echarts from 'echarts/core';\r\nimport 'echarts/map/js/china';\r\n\r\nclass Territory extends Component {\r\n\r\n    componentDidMount() {\r\n        const outname = ['北京', '上海', '四川', '广东', '陕西', '浙江', '香港'];\r\n        const outvalue = [2210, 1210, 2650, 2100, 890, 1063, 408];\r\n        const outdata = [];\r\n        let max = 6000, min = 10;\r\n        let maxSize4Pin = 100, minSize4Pin = 20;\r\n        for (let i = 0; i < outname.length; i++) {\r\n            outdata.push({\r\n                name: outname[i],\r\n                value: outvalue[i]\r\n            })\r\n        }\r\n        const geoCoordMap = {};\r\n        /*获取地图数据*/\r\n        const mapFeatures = echarts.getMap('china').geoJson.features;\r\n        mapFeatures.forEach(function (v) {\r\n            console.log(v);\r\n            // 地区名称\r\n            const name = v.properties.name;\r\n            // 地区经纬度\r\n            geoCoordMap[name] = v.properties.cp;\r\n\r\n        });\r\n        console.log(geoCoordMap);\r\n        const convertData = function (outdata) {\r\n            const res = [];\r\n            for (let i = 0; i < outdata.length; i++) {\r\n                const geoCoord = geoCoordMap[outdata[i].name];//第1个：{''}\r\n                console.log(geoCoord.concat(outdata[i].value));\r\n                if (geoCoord) {\r\n                    res.push({\r\n                        name: outdata[i].name,//省份名称\r\n                        value: geoCoord.concat(outdata[i].value),\r\n                    });\r\n                }\r\n            }\r\n            return res;\r\n        };\r\n        const option = {\r\n            title: {\r\n                text: '企业成员热力分布图',\r\n                left: 'center',\r\n                top: 15,\r\n                textStyle: {\r\n                    color: 'white'\r\n                }\r\n            },\r\n            // tooltip: {\r\n            //     show: true,\r\n            //     formatter: function (params) {\r\n            //         console.log(params);\r\n            //         if (params.value.length >= 1) {\r\n            //             return '&nbsp;&nbsp;' + params.name + '&nbsp;&nbsp;&nbsp;' + params.value[2] + '人&nbsp;&nbsp;';\r\n            //         } else {\r\n            //             return '&nbsp;&nbsp;' + params.name + '&nbsp;&nbsp;&nbsp;' + params.value + '人&nbsp;&nbsp;';\r\n            //         }\r\n            //     },\r\n            // },\r\n            geo: {\r\n                map: 'china',\r\n                show: true,\r\n                roam: false,\r\n                // label: {\r\n                //     emphasis: {\r\n                //         show: false\r\n                //     }\r\n                // },\r\n                layoutSize: \"110%\",\r\n                itemStyle: {\r\n                    borderColor: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\r\n                        offset: 0,\r\n                        color: '#00F6FF'\r\n                    }, {\r\n                        offset: 1,\r\n                        color: '#53D9FF'\r\n                    }], false),\r\n                    borderWidth: 3,\r\n                    shadowColor: 'rgba(10,76,139,1)',\r\n                    shadowOffsetY: 0,\r\n                    shadowBlur: 60\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'map',\r\n                    map: 'china',\r\n                    aspectScale: 0.75,\r\n                    label: {\r\n                        normal: {\r\n                            show: false,\r\n                        },\r\n                        emphasis: {\r\n                            show: false,\r\n                        }\r\n                    },\r\n                    itemStyle: {\r\n                        normal: {\r\n                            areaColor: {\r\n                                x: 0,\r\n                                y: 0,\r\n                                x2: 0,\r\n                                y2: 1,\r\n                                colorStops: [{\r\n                                    offset: 0,\r\n                                    color: '#073684' // 0% 处的颜色\r\n                                }, {\r\n                                    offset: 1,\r\n                                    color: '#061E3D' // 100% 处的颜色\r\n                                }],\r\n                            },\r\n                            borderColor: '#215495',\r\n                            borderWidth: 1,\r\n                        },\r\n                        emphasis: {\r\n                            areaColor: {\r\n\r\n                                x: 0,\r\n                                y: 0,\r\n                                x2: 0,\r\n                                y2: 1,\r\n                                colorStops: [{\r\n                                    offset: 0,\r\n                                    color: '#073684' // 0% 处的颜色\r\n                                }, {\r\n                                    offset: 1,\r\n                                    color: '#061E3D' // 100% 处的颜色\r\n                                }],\r\n                            },\r\n                        }\r\n                    },\r\n                    data: outdata,\r\n                },\r\n                {\r\n                    type: 'effectScatter',\r\n                    coordinateSystem: 'geo',\r\n                    rippleEffect: {\r\n                        brushType: 'stroke'\r\n                    },\r\n                    showEffectOn: 'render',\r\n                    itemStyle: {\r\n                        normal: {\r\n                            color: {\r\n                                type: 'radial',\r\n                                x: 0.5,\r\n                                y: 0.5,\r\n                                r: 0.5,\r\n                                colorStops: [{\r\n                                    offset: 0,\r\n                                    color: 'rgba(5,80,151,0.2)'\r\n                                }, {\r\n                                    offset: 0.8,\r\n                                    color: 'rgba(5,80,151,0.8)'\r\n                                }, {\r\n                                    offset: 1,\r\n                                    color: 'rgba(0,108,255,0.7)'\r\n                                }],\r\n                                global: false // 缺省为 false\r\n                            },\r\n                        }\r\n\r\n                    },\r\n                    label: {\r\n                        normal: {\r\n                            show: true,\r\n                            color: '#fff',\r\n                            fontWeight: 'bold',\r\n                            position: 'inside',\r\n                            formatter: function (para) {\r\n                                return '{cnNum|' + para.data.value[2] + '}'\r\n                            },\r\n                            rich: {\r\n                                cnNum: {\r\n                                    fontSize: 13,\r\n                                    color: '#D4EEFF',\r\n                                }\r\n                            }\r\n                        },\r\n                    },\r\n                    symbol: 'circle',\r\n                    symbolSize: function (val) {\r\n                        if (val[2] === 0) {\r\n                            return 0;\r\n                        }\r\n                        const a = (maxSize4Pin - minSize4Pin) / (max - min);\r\n                        const b = maxSize4Pin - a * max;\r\n                        return a * val[2] + b * 1.2;\r\n                    },\r\n                    data: convertData(outdata),\r\n                    zlevel: 1,\r\n                }]\r\n        };\r\n        echarts.init(this.container).setOption(option);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={element => {\r\n                this.container = element\r\n            }} style={{width: '870px', height: '628px', position: 'absolute', top: '184px', left: '656px'}}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Territory;\r\n"]},"metadata":{},"sourceType":"module"}