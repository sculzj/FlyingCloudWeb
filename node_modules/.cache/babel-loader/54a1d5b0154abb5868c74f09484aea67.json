{"ast":null,"code":"\"use strict\";\n/**\n * @file 全景图层\n * @author hedongran [hdr01@126.com]\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar Map_1 = require(\"../Map\");\n\nvar common_1 = require(\"../common\");\n\n;\n/**\n * 该组件用于展示全景蓝色路网图层，注意，该组件只展示蓝色路网，不包括进入全景图功能\n * @visibleName PanoramaLayer 全景图层\n */\n\nvar PanoramaLayer =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PanoramaLayer, _super);\n\n  function PanoramaLayer(props) {\n    return _super.call(this, props) || this;\n  }\n\n  PanoramaLayer.prototype.componentDidMount = function () {\n    this.initialize();\n  };\n\n  PanoramaLayer.prototype.componentDidUpdate = function (prevProps) {\n    this.initialize();\n  };\n\n  PanoramaLayer.prototype.componentWillUnmount = function () {\n    this.destroy();\n  };\n\n  PanoramaLayer.prototype.destroy = function () {\n    if (this.tilelayer) {\n      this.map.removeTileLayer(this.tilelayer); // @ts-ignore\n\n      this.tilelayer = undefined;\n    }\n  };\n\n  PanoramaLayer.prototype.initialize = function () {\n    var map = this.map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    this.destroy();\n    var tstyle = 'pl';\n    var udtVersion = '20190102';\n    var tilelayer = this.tilelayer = new BMapGL.TileLayer({\n      transparentPng: true\n    });\n    tilelayer.zIndex = 110; // point为图块坐标，level为图块的级别，当地图需要显示特定级别的特定位置的图块时就会自动调用此方法，并提供这两个参数。\n\n    tilelayer.getTilesUrl = function (point, level) {\n      if (!point || level < 0) {\n        return '';\n      }\n\n      var row = point.x;\n      var col = point.y;\n      var url = '//mapsv0.bdimg.com/tile/?udt=' + udtVersion + '&qt=tile&styles=' + tstyle + '&x=' + row + '&y=' + col + '&z=' + level;\n      return url;\n    };\n\n    map.addTileLayer(this.tilelayer);\n  };\n\n  PanoramaLayer.prototype.render = function () {\n    return null;\n  };\n\n  PanoramaLayer.contextType = Map_1.MapContext;\n  return PanoramaLayer;\n}(common_1.Component);\n\nexports.default = PanoramaLayer;","map":{"version":3,"sources":["D:/WebStorm Project/flowingcloud/node_modules/react-bmapgl/Layer/PanoramaLayer.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","Map_1","common_1","PanoramaLayer","_super","__extends","props","call","prototype","componentDidMount","initialize","componentDidUpdate","prevProps","componentWillUnmount","destroy","tilelayer","map","removeTileLayer","undefined","getMap","tstyle","udtVersion","BMapGL","TileLayer","transparentPng","zIndex","getTilesUrl","point","level","row","x","col","y","url","addTileLayer","render","contextType","MapContext","Component","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIG,aAAa;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACjDL,EAAAA,OAAO,CAACM,SAAR,CAAkBF,aAAlB,EAAiCC,MAAjC;;AACA,WAASD,aAAT,CAAuBG,KAAvB,EAA8B;AAC1B,WAAOF,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;AACH;;AACDH,EAAAA,aAAa,CAACK,SAAd,CAAwBC,iBAAxB,GAA4C,YAAY;AACpD,SAAKC,UAAL;AACH,GAFD;;AAGAP,EAAAA,aAAa,CAACK,SAAd,CAAwBG,kBAAxB,GAA6C,UAAUC,SAAV,EAAqB;AAC9D,SAAKF,UAAL;AACH,GAFD;;AAGAP,EAAAA,aAAa,CAACK,SAAd,CAAwBK,oBAAxB,GAA+C,YAAY;AACvD,SAAKC,OAAL;AACH,GAFD;;AAGAX,EAAAA,aAAa,CAACK,SAAd,CAAwBM,OAAxB,GAAkC,YAAY;AAC1C,QAAI,KAAKC,SAAT,EAAoB;AAChB,WAAKC,GAAL,CAASC,eAAT,CAAyB,KAAKF,SAA9B,EADgB,CAEhB;;AACA,WAAKA,SAAL,GAAiBG,SAAjB;AACH;AACJ,GAND;;AAOAf,EAAAA,aAAa,CAACK,SAAd,CAAwBE,UAAxB,GAAqC,YAAY;AAC7C,QAAIM,GAAG,GAAG,KAAKA,GAAL,GAAW,KAAKG,MAAL,EAArB;;AACA,QAAI,CAACH,GAAL,EAAU;AACN;AACH;;AACD,SAAKF,OAAL;AACA,QAAIM,MAAM,GAAG,IAAb;AACA,QAAIC,UAAU,GAAG,UAAjB;AACA,QAAIN,SAAS,GAAG,KAAKA,SAAL,GAAiB,IAAIO,MAAM,CAACC,SAAX,CAAqB;AAClDC,MAAAA,cAAc,EAAE;AADkC,KAArB,CAAjC;AAGAT,IAAAA,SAAS,CAACU,MAAV,GAAmB,GAAnB,CAX6C,CAY7C;;AACAV,IAAAA,SAAS,CAACW,WAAV,GAAwB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAC5C,UAAI,CAACD,KAAD,IAAUC,KAAK,GAAG,CAAtB,EAAyB;AACrB,eAAO,EAAP;AACH;;AACD,UAAIC,GAAG,GAAGF,KAAK,CAACG,CAAhB;AACA,UAAIC,GAAG,GAAGJ,KAAK,CAACK,CAAhB;AACA,UAAIC,GAAG,GAAG,kCAAkCZ,UAAlC,GACJ,kBADI,GACiBD,MADjB,GAC0B,KAD1B,GACkCS,GADlC,GACwC,KADxC,GACgDE,GADhD,GACsD,KADtD,GAC8DH,KADxE;AAEA,aAAOK,GAAP;AACH,KATD;;AAUAjB,IAAAA,GAAG,CAACkB,YAAJ,CAAiB,KAAKnB,SAAtB;AACH,GAxBD;;AAyBAZ,EAAAA,aAAa,CAACK,SAAd,CAAwB2B,MAAxB,GAAiC,YAAY;AACzC,WAAO,IAAP;AACH,GAFD;;AAGAhC,EAAAA,aAAa,CAACiC,WAAd,GAA4BnC,KAAK,CAACoC,UAAlC;AACA,SAAOlC,aAAP;AACH,CAnDkC,CAmDjCD,QAAQ,CAACoC,SAnDwB,CAAnC;;AAoDAzC,OAAO,CAAC0C,OAAR,GAAkBpC,aAAlB","sourcesContent":["\"use strict\";\n/**\n * @file 全景图层\n * @author hedongran [hdr01@126.com]\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Map_1 = require(\"../Map\");\nvar common_1 = require(\"../common\");\n;\n/**\n * 该组件用于展示全景蓝色路网图层，注意，该组件只展示蓝色路网，不包括进入全景图功能\n * @visibleName PanoramaLayer 全景图层\n */\nvar PanoramaLayer = /** @class */ (function (_super) {\n    tslib_1.__extends(PanoramaLayer, _super);\n    function PanoramaLayer(props) {\n        return _super.call(this, props) || this;\n    }\n    PanoramaLayer.prototype.componentDidMount = function () {\n        this.initialize();\n    };\n    PanoramaLayer.prototype.componentDidUpdate = function (prevProps) {\n        this.initialize();\n    };\n    PanoramaLayer.prototype.componentWillUnmount = function () {\n        this.destroy();\n    };\n    PanoramaLayer.prototype.destroy = function () {\n        if (this.tilelayer) {\n            this.map.removeTileLayer(this.tilelayer);\n            // @ts-ignore\n            this.tilelayer = undefined;\n        }\n    };\n    PanoramaLayer.prototype.initialize = function () {\n        var map = this.map = this.getMap();\n        if (!map) {\n            return;\n        }\n        this.destroy();\n        var tstyle = 'pl';\n        var udtVersion = '20190102';\n        var tilelayer = this.tilelayer = new BMapGL.TileLayer({\n            transparentPng: true\n        });\n        tilelayer.zIndex = 110;\n        // point为图块坐标，level为图块的级别，当地图需要显示特定级别的特定位置的图块时就会自动调用此方法，并提供这两个参数。\n        tilelayer.getTilesUrl = function (point, level) {\n            if (!point || level < 0) {\n                return '';\n            }\n            var row = point.x;\n            var col = point.y;\n            var url = '//mapsv0.bdimg.com/tile/?udt=' + udtVersion\n                + '&qt=tile&styles=' + tstyle + '&x=' + row + '&y=' + col + '&z=' + level;\n            return url;\n        };\n        map.addTileLayer(this.tilelayer);\n    };\n    PanoramaLayer.prototype.render = function () {\n        return null;\n    };\n    PanoramaLayer.contextType = Map_1.MapContext;\n    return PanoramaLayer;\n}(common_1.Component));\nexports.default = PanoramaLayer;\n"]},"metadata":{},"sourceType":"script"}